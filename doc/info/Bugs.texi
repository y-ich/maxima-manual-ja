@menu
* Functions and Variables for Bug Detection and Reporting::
@end menu

@c -----------------------------------------------------------------------------
@node Functions and Variables for Bug Detection and Reporting
@section Functions and Variables for Bug Detection and Reporting
@c -----------------------------------------------------------------------------

@c -----------------------------------------------------------------------------
@anchor{run_testsuite}
@deffn {関数} run_testsuite ([@var{options}])

Maximaのテストスイートを走らせます。
望みの答えを生成したテストは「パス」とみなされます。
望みの答えを生成しないテストも同様ですが、既知のバグとしてマークされています。

@code{run_testsuite}は、以下のオプションキーワード引数を取ります。

@table @code
@item display_all
テストすべてを表示します。
通常は、テストが失敗しない限りテストを表示しません。
（デフォルトでは @code{false}に設定されます。）
@item display_known_bugs
既知のバグとしてマークされているテストを表示します。
（デフォルトでは @code{false}に設定されます。）
@item tests
これは、実行するテスト(単体の場合)、もしくはテストのリストです。
それぞれのテストは文字列かシンボルで指定することができます。
デフォルトではテストすべてを実行します。
テストの完全な組は @mref{testsuite_files}で指定されています。
@item time
時間情報を表示します。
もし @code{true}ならそれぞれのテストファイルにかかった時間を表示します。
もし @code{all}なら @code{display_all}が @code{true}の時、
それぞれ個々のテストにかかった時間を示します。
デフォルトは@code{false}で、時間情報を示しません。
@item share_tests
@code{share}ディレクトリに関する追加のテストをロードします。
もし @code{true}なら、テストスイートの一部としてこれらの追加のテストが走ります。
もし @code{false}なら、 @code{share}ディレクトリからのテストは走りません。
もし @code{only}なら、 @code{share}ディレクトリからのテストだけが走ります。
もちろん、テストの実際の集合は、 @code{tests}オプションで制御することができます。
デフォルトは @code{false}です。
@end table

例えば、 @code{run_testsuite(display_known_bugs = true, tests=[rtest5])}は、
テスト @code{rtest5}だけを走らせ、既知のバグとしてマークされているテストを表示します。

@code{run_testsuite(display_all = true, tests=["rtest1", rtest1a])}は、
テスト @code{rtest1}と @code{rtest2}を走らせ、
テストそれぞれを表示します。

@code{run_testsuite}は、Maxima環境を変更します。
通常は、テストスクリプトは
既知の環境（すなわちユーザー定義の関数や変数のない環境）を確立するために
@mref{kill}を実行し、
それからテストにふさわしい関数や変数を定義します。

@code{run_testsuite}は @code{done}を返します。

@opencatbox
@category{Debugging}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{testsuite_files}
@defvr {オプション変数} testsuite_files

@code{testsuite_files}は @mref{run_testsuite}が実行するテスト一式です。
それは実行するテストを含むファイル名のリストです。
もしファイルの中のテストのいくつかが失敗することが既知なら、
ファイル名をリストする代わりに、
ファイル名と失敗するテスト番号を含むリストを使います。

例えば、以下はデフォルトのテスト一式の一部です:

@example
 ["rtest13s", ["rtest14", 57, 63]]
@end example

これは、ファイル"rtest13s", "rtest14"から成るテストスイートを指定しますが、
"rtest14" は失敗することが既知の２つのテスト57と63を含みます。

@opencatbox
@category{Debugging} @category{Global variables}
@closecatbox
@end defvr

@defvr {オプション変数} share_testsuite_files

@code{share_testsuite_files}は、@mref{run_testsuite}がテストスイートの一部として走らせる
@code{share}ディレクトリからのテストの集合です。

@opencatbox
@category{Debugging} @category{Global variables}
@closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@anchor{bug_report}
@deffn {関数} bug_report ()

MaximaとLispのバージョン番号を表示し、Maximaプロジェクトのバグレポートウェブサイトへのリンクを与えます。
バージョン情報は@mref{build_info}がレポートするものと同じです。

バグをレポートする時、
MaximaとLispのバージョン情報をバグレポートにコピーしてもらえると助かります。

@code{bug_report}は空の文字列 @code{""}を返します。

@opencatbox
@category{Debugging}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{build_info}
@deffn {関数} build_info ()

(@code{defstruct}で定義された) Maxima構造体として
Maximaビルドのパラメータのまとめを表示します。
構造体のフィールドは以下です:
@code{version}, @code{timestamp}, @code{host}, @code{lisp_name}, @code{lisp_version}。
(@code{display2d}により)プリティプリントがイネーブルの時、
構造体は短いテーブルとして表示されます。

@mrefdot{bug_report}も参照してください。

例:

@c ===beg===
@c build_info ();
@c x : build_info ()$
@c x@version;
@c x@timestamp;
@c x@host;
@c x@lisp_name;
@c x@lisp_version;
@c x;
@c ===end===
@example
@group
(%i1) build_info ();
(%o1)
Maxima version: "5.36.1"
Maxima build date: "2015-06-02 11:26:48"
Host type: "x86_64-unknown-linux-gnu"
Lisp implementation type: "GNU Common Lisp (GCL)"
Lisp implementation version: "GCL 2.6.12"
@end group
(%i2) x : build_info ()$
@group
(%i3) x@@version;
(%o3)                               5.36.1
@end group
@group
(%i4) x@@timestamp;
(%o4)                         2015-06-02 11:26:48
@end group
@group
(%i5) x@@host;
(%o5)                      x86_64-unknown-linux-gnu
@end group
@group
(%i6) x@@lisp_name;
(%o6)                        GNU Common Lisp (GCL)
@end group
@group
(%i7) x@@lisp_version;
(%o7)                             GCL 2.6.12
@end group
@group
(%i8) x;
(%o8)
Maxima version: "5.36.1"
Maxima build date: "2015-06-02 11:26:48"
Host type: "x86_64-unknown-linux-gnu"
Lisp implementation type: "GNU Common Lisp (GCL)"
Lisp implementation version: "GCL 2.6.12"
@end group
@end example

The Maxima version string can (here 5.36.1) can look very different:

@example
(%i1) build_info();
(%o1)
Maxima version: "branch_5_37_base_331_g8322940_dirty"
Maxima build date: "2016-01-01 15:37:35"
Host type: "x86_64-unknown-linux-gnu"
Lisp implementation type: "CLISP"
Lisp implementation version: "2.49 (2010-07-07) (built 3605577779) (memory 3660647857)"
@end example

@c The version number comes from "git describe", and is (in that example)
@c 331 commits after the latest tag, that is reachable from that commit
@c don't know how to describe it better...
その場合、Maximaはリリースされたソースコードからビルドされておらず、
ソースコードのGITチェックアウトから直接ビルドされていました。
この例では、チェックアウトは最新のGITタグ(普通Maxima(メジャー)リリース(この例の場合5.37))から
331コミットあり、最後のコミットの短縮されたコミットハッシュは"8322940"でした。

@opencatbox
@category{Debugging}
@closecatbox
@end deffn
