@menu
* Functions and Variables for Number Theory::
@end menu

@c -----------------------------------------------------------------------------
@node Functions and Variables for Number Theory,  , Number Theory, Number Theory
@section Functions and Variables for Number Theory
@c -----------------------------------------------------------------------------

@c -----------------------------------------------------------------------------
@anchor{bern}
@deffn {関数} bern (@var{n})

整数 @var{n}について @var{n}番目の Bernoulli数を返します。
@c WELL, ACTUALLY bern SIMPLIFIES, LIKE FACTORIAL -- DO WE WANT TO GET INTO THAT ???
@c OR JUST PRETEND IT'S "RETURNED" ???
もし @code{zerobern}が @code{false}ならゼロに等しい Bernoulli数は抑制されます。

@mref{burn}も参照してください。

@example
(%i1) zerobern: true$
(%i2) map (bern, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
                      1  1       1      1        1
(%o2)           [1, - -, -, 0, - --, 0, --, 0, - --]
                      2  6       30     42       30
(%i3) zerobern: false$
(%i4) map (bern, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
                      1  1    1   1     1   5     691   7
(%o4)           [1, - -, -, - --, --, - --, --, - ----, -]
                      2  6    30  42    30  66    2730  6
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{bernpoly}
@deffn {関数} bernpoly (@var{x}, @var{n})

変数 @var{x}に関する @var{n}番目の Bernoulli多項式を返します。

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{bfzeta}
@deffn {関数} bfzeta (@var{s}, @var{n})

引数 @var{s}に関する Riemannのゼータ関数を返します。
戻り値は多倍長浮動小数点です; @var{n}は戻り値の小数点以下の桁数です。

@opencatbox
@category{Number theory} @category{Numerical evaluation}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{bfhzeta}
@deffn {関数} bfhzeta (@var{s}, @var{h}, @var{n})

引数 @var{s}と @var{h}に関する Hurwitzのゼータ関数を返します。
戻り値は多倍長浮動小数点です; @var{n}は戻り値の小数点以下の桁数です。

Hurwitzゼータ関数は以下のように定義されます。

@tex
$$\zeta \left(s,h\right) = \sum_{k=0}^\infty {1 \over \left(k+h\right)^{s}}$$
@end tex
@ifnottex
@example
                        inf
                        ====
                        \        1
         zeta (s,h)  =   >    --------
                        /            s
                        ====  (k + h)
                        k = 0
@end example
@end ifnottex

@code{load ("bffac")}でこの関数をロードします。

@opencatbox
@category{Number theory} @category{Numerical evaluation}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{burn}
@deffn {関数} burn (@var{n})

@var{n}番目の Bernoulli数の近似の有理数をを返します。
@code{burn}は(有理) Bernoulli数が
まあまあの効率で(超越的)ゼータによって近似できるという観察を利用します。

@example
                   n - 1  1 - 2 n
              (- 1)      2        zeta(2 n) (2 n)!
     B(2 n) = ------------------------------------
                                2 n
                             %pi
@end example

@mref{bern}は返す前にインデックス @var{n}までの Bernoulli数すべてを計算するので、
@code{burn}は大きな、孤立した @var{n}(たぶん 105以上の @var{n})に対しては
@mref{bern}より効率的かもしれません。
@code{burn}は 255よりおおきな偶数 @var{n}に対しては近似を呼び出します。
奇数と 255以下の @var{n}に対しては関数 @mref{bern}が呼び出されます。

@code{load ("bffac")}でこの関数をロードします。
@mref{bern}も参照してください。

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{chinese}
@deffn {関数} chinese ([@var{r_1}, @dots{}, @var{r_n}], [@var{m_1}, @dots{}, @var{m_n}])

連立合同式 @code{x = r_1 mod m_1}, @dots{}, @code{x = r_n mod m_n}を解きます。
剰余 @var{r_n}は任意の整数が可能である一方、 法 @var{m_n}は正の互いに素な整数でなければいけません。

@example
(%i1) mods : [1000, 1001, 1003, 1007];
(%o1)                   [1000, 1001, 1003, 1007]
(%i2) lreduce('gcd, mods);
(%o2)                               1
(%i3) x : random(apply("*", mods));
(%o3)                         685124877004
(%i4) rems : map(lambda([z], mod(x, z)), mods);
(%o4)                       [4, 568, 54, 624]
(%i5) chinese(rems, mods);
(%o5)                         685124877004
(%i6) chinese([1, 2], [3, n]);
(%o6)                    chinese([1, 2], [3, n])
(%i7) %, n = 4;
(%o7)                              10
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{cf}
@deffn {関数} cf (@var{expr})

連分数近似を計算します。
@var{expr}は連分数と整数の平方根と実数リテラル(整数、有理数、通常の浮動小数点や多倍長浮動小数点)から構成される式です。 @code{cf}は有理数に関して厳密な展開を計算しますが、
通常の浮動小数点に関して展開は @code{ratepsilon}で丸められ、
多倍長小数点に関して @code{10^(-fpprec)}で丸められます。

式の中のオペランドは代数演算子を組み合わせられます。
Maximaは @code{cf}の外側で連分数に関する演算について知りません。

@code{cf}は、
@code{listarith}を @code{false}にバインドした後、引数を評価します。
@code{cf}はリストとして表現された連分数を返します。

連分数 @code{a + 1/(b + 1/(c + ...))}はリスト @code{[a, b, c, ...]}で表現されます。
リストの要素 @code{a}, @code{b}, @code{c}, ...は整数に評価されなければいけません。
@var{expr}は @code{sqrt (n)}も含むかもしれません。
@code{n}は整数です。
この場合、@code{cf}は変数 @mref{cflength}の値掛ける周期と同じ数の連分数の項を与えます。

@mref{cfdisrep}が返す代数表現を評価することで、連分数は数に評価することができます。
連分数を評価する別の方法に関しては @mref{cfexpand}も参照してください。

@mref{cfdisrep}, @mref{cfexpand}, @mref{cflength}も参照してください。

例:

@itemize @bullet
@item
@var{expr}は連分数と整数の平方根から成る式です。

@example
(%i1) cf ([5, 3, 1]*[11, 9, 7] + [3, 7]/[4, 3, 2]);
(%o1)               [59, 17, 2, 1, 1, 1, 27]
(%i2) cf ((3/17)*[1, -2, 5]/sqrt(11) + (8/13));
(%o2)        [0, 1, 1, 1, 3, 2, 1, 4, 1, 9, 1, 9, 2]
@end example

@item
@code{cflength}は連分数の何周期を代数的無理数のために計算するかを制御します。

@example
(%i1) cflength: 1$
(%i2) cf ((1 + sqrt(5))/2);
(%o2)                    [1, 1, 1, 1, 2]
(%i3) cflength: 2$
(%i4) cf ((1 + sqrt(5))/2);
(%o4)               [1, 1, 1, 1, 1, 1, 1, 2]
(%i5) cflength: 3$
(%i6) cf ((1 + sqrt(5))/2);
(%o6)           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]
@end example

@item
@mref{cfdisrep}が返す代数的表現を評価することによって連分数を評価することができます。

@example
(%i1) cflength: 3$
(%i2) cfdisrep (cf (sqrt (3)))$
(%i3) ev (%, numer);
(%o3)                   1.731707317073171
@end example

@item
Maximaは @code{cf}の外側で連分数に関する演算について知りません。

@example
(%i1) cf ([1,1,1,1,1,2] * 3);
(%o1)                     [4, 1, 5, 2]
(%i2) cf ([1,1,1,1,1,2]) * 3;
(%o2)                  [3, 3, 3, 3, 3, 6]
@end example

@end itemize

@opencatbox
@category{Continued fractions}
@closecatbox
@end deffn

@c NEEDS CLARIFICATION -- MAKE EXPLICIT HOW list IS RELATED TO a, b, c, ...
@c ALSO, CAN list CONTAIN ANYTHING OTHER THAN LITERAL INTEGERS ??

@c -----------------------------------------------------------------------------
@anchor{cfdisrep}
@deffn {関数} cfdisrep (@var{list})

連分数 @code{[a, b, c, ...]}のリスト表現から形式
@code{a + 1/(b + 1/(c + ...))}の通常の代数式を構成し返します。

@example
(%i1) cf ([1, 2, -3] + [1, -2, 1]);
(%o1)                     [1, 1, 1, 2]
(%i2) cfdisrep (%);
                                  1
(%o2)                     1 + ---------
                                    1
                              1 + -----
                                      1
                                  1 + -
                                      2
@end example

@opencatbox
@category{Continued fractions}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{cfexpand}
@deffn {関数} cfexpand (@var{x})

連分数 @var{x}のコンバージェントの最後(列1)とその１つ前(列2)の分子と分母の行列を返します。

@example
(%i1) cf (rat (ev (%pi, numer)));

`rat' replaced 3.141592653589793 by 103993/33102 =3.141592653011902
(%o1)                  [3, 7, 15, 1, 292]
(%i2) cfexpand (%);
                         [ 103993  355 ]
(%o2)                    [             ]
                         [ 33102   113 ]
(%i3) %[1,1]/%[2,1], numer;
(%o3)                   3.141592653011902
@end example

@opencatbox
@category{Continued fractions}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{cflength}
@defvr {オプション変数} cflength
デフォルト値: 1

@code{cflength}は、値 @code{cflength}掛ける周期として関数
@code{cf}が与える連分数の項の数を制御します。
従って、デフォルトは 1周期を与えます。

@example
(%i1) cflength: 1$
(%i2) cf ((1 + sqrt(5))/2);
(%o2)                    [1, 1, 1, 1, 2]
(%i3) cflength: 2$
(%i4) cf ((1 + sqrt(5))/2);
(%o4)               [1, 1, 1, 1, 1, 1, 1, 2]
(%i5) cflength: 3$
(%i6) cf ((1 + sqrt(5))/2);
(%o6)           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]
@end example

@opencatbox
@category{Continued fractions}
@closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@anchor{divsum}
@deffn  {関数} divsum @
@fname{divsum} (@var{n}, @var{k}) @
@fname{divsum} (@var{n})

@code{divsum (@var{n}, @var{k})}は @var{n}の約数の @var{k}乗した和を返します。

@code{divsum (@var{n})}は @var{n}の約数の和を返します。

@example
(%i1) divsum (12);
(%o1)                          28
(%i2) 1 + 2 + 3 + 4 + 6 + 12;
(%o2)                          28
(%i3) divsum (12, 2);
(%o3)                          210
(%i4) 1^2 + 2^2 + 3^2 + 4^2 + 6^2 + 12^2;
(%o4)                          210
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{euler}
@deffn {関数} euler (@var{n})

非負の整数 @var{n}に対して @var{n}番目のEuler数を返します。
もし @code{zerobern}が @code{false}なら、
0のEuler数は抑制されます。

Euler-Mascheroni定数に関しては @code{%gamma}を参照してください。

@example
(%i1) zerobern: true$
(%i2) map (euler, [0, 1, 2, 3, 4, 5, 6]);
(%o2)               [1, 0, - 1, 0, 5, 0, - 61]
(%i3) zerobern: false$
(%i4) map (euler, [0, 1, 2, 3, 4, 5, 6]);
(%o4)               [1, - 1, 5, - 61, 1385, - 50521, 2702765]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{factors_only}
@defvr {オプション変数} factors_only
デフォルト値: @code{false}

@mref{ifactors}が返す値を制御します。
デフォルトの @code{false}の時、
@code{ifactors}は計算された素因数の多重性について情報を提供するようになります。
もし @code{factors_only}が @code{true}に設定されているなら、
@code{ifactors}は素因数のリスト以外なにも返しません。

例: @mref{ifactors}を参照してください。

@opencatbox
@category{Number theory}
@closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@anchor{fib}
@deffn {関数} fib (@var{n})
第 @var{n}項の Fibonacci数を返します。
@code{fib(0)}は 0に等しく、 @code{fib(1)}は 1に等しく、
@code{fib (-@var{n})}は @code{(-1)^(@var{n} + 1) * fib(@var{n})}に等しいです。

@code{fib}をコールした後，
@code{prevfib}は 最後に計算された１つ前の Fibonacci数
@code{fib (@var{x} - 1)}に等しいです。

@example
(%i1) map (fib, [-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]);
(%o1)           [- 3, 2, - 1, 1, 0, 1, 1, 2, 3, 5, 8, 13, 21]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{fibtophi}
@deffn {関数} fibtophi (@var{expr})

@var{expr}に関する Fibonacci数を定数 @code{%phi}を使って表現します。
@code{%phi}は @code{(1 + sqrt(5))/2}, 近似的に1.61803399です。

例:

@c ===beg===
@c fibtophi (fib (n));
@c fib (n-1) + fib (n) - fib (n+1);
@c fibtophi (%);
@c ratsimp (%);
@c ===end===
@example
(%i1) fibtophi (fib (n));
                           n             n
                       %phi  - (1 - %phi)
(%o1)                  -------------------
                           2 %phi - 1
(%i2) fib (n-1) + fib (n) - fib (n+1);
(%o2)          - fib(n + 1) + fib(n) + fib(n - 1)
(%i3) fibtophi (%);
            n + 1             n + 1       n             n
        %phi      - (1 - %phi)        %phi  - (1 - %phi)
(%o3) - --------------------------- + -------------------
                2 %phi - 1                2 %phi - 1
                                          n - 1             n - 1
                                      %phi      - (1 - %phi)
                                    + ---------------------------
                                              2 %phi - 1
(%i4) ratsimp (%);
(%o4)                           0
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{ifactors}
@deffn {関数} ifactors (@var{n})

正の整数 @var{n}に対して @var{n}の素因数分解を返します。
もし @code{n=p1^e1..pk^nk}が @var{n}の素因数への分解なら、
ifactorsは @code{[[p1, e1], ... , [pk, ek]]}を返します。

使われる素因数分解法は 9973までの素数による試行除算と、
Pollardのローとp-1法と、楕円曲線法です。

もし変数 @code{ifactor_verbose}が @code{true}に設定されているなら、
ifactorは、因子が見つかり次第直近のフィードバックを含めて何をしているか詳細出力を生成します。

@code{ifactors}が返す値はオプション変数 @mref{factors_only}によって制御されます。
デフォルトの @code{false}の時、 @code{ifactors}は計算された素因数の多重性について情報を提供するようになります。
もし @code{factors_only}が @code{true}に設定されているなら、
@code{ifactors}は単に素因数のリストを返します。

@example
(%i1) ifactors(51575319651600);
(%o1)     [[2, 4], [3, 2], [5, 2], [1583, 1], [9050207, 1]]
(%i2) apply("*", map(lambda([u], u[1]^u[2]), %));
(%o2)                        51575319651600
(%i3) ifactors(51575319651600), factors_only : true;
(%o3)                   [2, 3, 5, 1583, 9050207]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{igcdex}
@deffn {関数} igcdex (@var{n}, @var{k})

リスト @code{[@var{a}, @var{b}, @var{u}]}を返します。
ここで、 @var{u}は @var{n}と @var{k}の最大公約数で、
@var{u}は @code{@var{a} @var{n} + @var{b} @var{k}}に等しいです。
引数 @var{n}と @var{k}は整数でなければいけません。

@code{igcdex}はユークリッドのアルゴリズムを実装します。
@mrefdot{gcdex}も参照してください。

コマンド @code{load("gcdex")}でこの関数をロードします。

例:

@example
(%i1) load("gcdex")$

(%i2) igcdex(30,18);
(%o2)                      [- 1, 2, 6]
(%i3) igcdex(1526757668, 7835626735736);
(%o3)            [845922341123, - 164826435, 4]
(%i4) igcdex(fib(20), fib(21));
(%o4)                   [4181, - 2584, 1]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{inrt}
@deffn {関数} inrt (@var{x}, @var{n})

@var{x}の絶対値の整数 @var{n}乗根を返します。

@example
(%i1) l: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]$
(%i2) map (lambda ([a], inrt (10^a, 3)), l);
(%o2) [2, 4, 10, 21, 46, 100, 215, 464, 1000, 2154, 4641, 10000]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{inv_mod}
@deffn {関数} inv_mod (@var{n}, @var{m})

@var{m}を法とする @var{n}の逆元を計算します。
もし @var{n}が @var{m}を法とするゼロ因子なら、
@code{inv_mod (n,m)}は @code{false}を返します。

@example
(%i1) inv_mod(3, 41);
(%o1)                           14
(%i2) ratsimp(3^-1), modulus = 41;
(%o2)                           14
(%i3) inv_mod(3, 42);
(%o3)                          false
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{isqrt}
@deffn {関数} isqrt (@var{x})

整数 @var{x}の絶対値の「整数平方根」を返します。

@opencatbox
@category{Mathematical functions}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{jacobi}
@deffn {関数} jacobi (@var{p}, @var{q})

@var{p}と @var{q}の Jacobi記号を返します。

@example
(%i1) l: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]$
(%i2) map (lambda ([a], jacobi (a, 9)), l);
(%o2)         [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{lcm}
@deffn {関数} lcm (@var{expr_1}, ..., @var{expr_n})

引数の最小公倍数を返します。
引数は、整数はもちろん一般式を取り得ます。

@code{load ("functs")}でこの関数をロードします。

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{lucas}
@deffn {関数} lucas (@var{n})

@var{n}番目の Lucas数を返します。
@code{lucas(0)}は 2に等しく、 @code{lucas(1)}は 1に等しく、
@code{lucas(-@var{n})}は @code{(-1)^(-@var{n}) * lucas(@var{n})}に等しいです。

@example
(%i1) map (lucas, [-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]);
(%o1)             [7, - 4, 3, - 1, 2, 1, 3, 4, 7, 11, 18, 29, 47]
@end example

After calling
@code{lucas}を呼び出した後には、グローバル変数 @code{next_lucas}は
最後の戻り値に続く Lucas数 @code{lucas (@var{n} + 1)}に等しいです。
例は、どのようにして Fibonacci数が @code{lucas}と @code{next_lucas}を使って計算可能かを示します。

@example
(%i1) fib_via_lucas(n) :=
         block([lucas : lucas(n)],
         signum(n) * (2*next_lucas - lucas)/5 )$
(%i2) map (fib_via_lucas, [-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]);
(%o2)             [- 3, 2, - 1, 1, 0, 1, 1, 2, 3, 5, 8, 13, 21]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{mod}
@deffn {関数} mod (@var{x}, @var{y})

もし @var{x}と @var{y}が実数で、 @var{y}がゼロでないなら、
@code{@var{x} - @var{y} * floor(@var{x} / @var{y})}を返します。
さらにすべての実数 @var{x}に関して @code{mod (@var{x}, 0) = @var{x}}が成り立ちます。
定義 @code{mod (@var{x}, 0) = @var{x}}の議論に関しては、
Graham, Knuth, Patashnik著の「コンピュータの数学」の3.4節を参照してください。
関数 @code{mod (@var{x}, 1)} は周期が 1で
@code{mod (1, 1) = 0}、@code{mod (0, 1) = 0}ののこぎり波関数です。

複素数の偏角の主値（区間 @code{(-%pi, %pi]}での数）を見つけるためには、
関数 @code{@var{x} |-> %pi - mod (%pi - @var{x}, 2*%pi)}を使います。
@var{x}は引数です。

@var{x}と @var{y}が定数式(例えば @code{10 * %pi})の時、
@code{mod}は @code{floor}や
@code{ceiling}が使うのと同じ多倍長浮動小数点評価スキームを使います。
同様に、まれですが そんな場合には@code{mod}は間違った値を返すことがありえます。

数値でない引数 @var{x}や @var{y}に関して
@code{mod}はいくつかの式整理規則を知っています:


@c ===beg===
@c mod (x, 0);
@c mod (a*x, a*y);
@c mod (0, x);
@c ===end===
@example
(%i1) mod (x, 0);
(%o1)                           x
(%i2) mod (a*x, a*y);
(%o2)                      a mod(x, y)
(%i3) mod (0, x);
(%o3)                           0
@end example

@opencatbox
@category{Mathematical functions}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{next_prime}
@deffn {関数} next_prime (@var{n})

@var{n}よりも大きな最も小さな素数を返します。

@example
(%i1) next_prime(27);
(%o1)                       29
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{partfrac}
@deffn {関数} partfrac (@var{expr}, @var{var})

主変数 @var{var}に関する部分分数式 @var{expr}を展開します。
@code{partfrac}は完全な部分分数分解を行います。
利用したアルゴリズムは
部分分数展開(元の分母の因子)の分母は互いに素であるという事実に基づいています。
分子は分母の線形結合として書けて、結果は展開されたものになります。

@code{partfrac}はオプション変数 @code{keepfloat}の値 @code{true}を無視します。

@example
(%i1) 1/(1+x)^2 - 2/(1+x) + 2/(2+x);
                      2       2        1
(%o1)               ----- - ----- + --------
                    x + 2   x + 1          2
                                    (x + 1)
(%i2) ratsimp (%);
                                 x
(%o2)                 - -------------------
                         3      2
                        x  + 4 x  + 5 x + 2
(%i3) partfrac (%, x);
                      2       2        1
(%o3)               ----- - ----- + --------
                    x + 2   x + 1          2
                                    (x + 1)
@end example
@end deffn

@c -----------------------------------------------------------------------------
@anchor{power_mod}
@deffn {関数} power_mod (@var{a}, @var{n}, @var{m})

@code{a^n mod m}を計算するために剰余アルゴリズムを使います。
ここで、 @var{a}と @var{n}は整数で、 @var{m}は正の整数です。
もし @var{n}が負なら @code{inv_mod}が剰余逆元を見つけるために使われます。

@example
(%i1) power_mod(3, 15, 5);
(%o1)                          2
<(%i2) mod(3^15,5);
(%o2)                          2
(%i3) power_mod(2, -1, 5);
(%o3)                          3
(%i4) inv_mod(2,5);
(%o4)                          3
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{primep}
@deffn {関数} primep (@var{n})

素数テスト。
もし @code{primep (@var{n})}が @code{false}を返すなら、 @var{n}は合成数であり、
もし @code{true}を返すなら、 @var{n}は非常に高い確率で素数です。

341550071728321より小さな @var{n}に対しては
Miller-Rabinのテストの決定的バージョンが使われます。
もし @code{primep (@var{n})}が @code{true}を返すなら、 @var{n}は素数です。

341550071728321よりの大きな @var{n}に対して、
@code{primep}は、
@code{primep_number_of_tests}個の Miller-Rabinの疑似素数テストと
1つの Lucasの疑似素数テストを使います。
合成数の @var{n}が Miller-Rabinのテスト１つを通過する確率は 1/4より小さいです。
@code{primep_number_of_tests}に関してデフォルト値 25を使うと、
通過した @var{n}が合成である確率は 10^-15よりもはるかに小さいです。

@opencatbox
@category{Predicate functions} @category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{primep_number_of_tests}
@defvr {オプション変数} primep_number_of_tests
デフォルト値: 25

@code{primep}の中で使われる Miller-Rabinのテストの回数。


@opencatbox
@category{Number theory}
@closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@anchor{primes}
@deffn {関数} primes (@var{start}, @var{end})

@var{start}から @var{end}までのすべての素数のリストを返します。

@example
(%i1) primes(3, 7);
(%o1)                     [3, 5, 7]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{prev_time}
@deffn {関数} prev_prime (@var{n})

@var{n}よりも小さな最大の素数を返します。

@example
(%i1) prev_prime(27);
(%o1)                       23
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{qunit}
@deffn {関数} qunit (@var{n})

実二次数体 @code{sqrt (@var{n})}の基本単数、すなわちノルムが 1の要素を返します。
ここで @var{n}は整数です。
これは結果的にペル方程式 @code{a^2 - @var{n} b^2 = 1}を解くことになります。

@example
(%i1) qunit (17);
(%o1)                     sqrt(17) + 4
(%i2) expand (% * (sqrt(17) - 4));
(%o2)                           1
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{totient}
@deffn {関数} totient (@var{n})

@var{n}以下の @var{n}と互いに素な整数の数を返します。

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@defvr {オプション変数} zerobern
デフォルト値: @code{true}

@code{zerobern}が @code{false}の時、
@code{bern}は Bernoulli数を除外し、 @code{euler}はゼロに等しい Euler数を除外します。
@code{bern}と @code{euler}を参照してください。

@opencatbox
@category{Number theory}
@closecatbox

@end defvr

@c -----------------------------------------------------------------------------
@anchor{zeta}
@deffn {関数} zeta (@var{n})

Riemannのゼータ関数を返します。
もし @var{x}が負の整数か, 0, 1,または正の偶数なら、
Reimannのゼータ関数は厳密な値に整理されます。
正の偶数に対してはオプション変数
@code{zeta%pi}は @code{true}であることも必要です。
(@code{zeta%pi}を参照してください。)
浮動小数点または多倍長浮動小数点数に対しては Reimannゼータ関数は数値的に評価されます。
Maximaは、
有理非整数、浮動小数点数、複素数の引数を含む他の引数すべてに対して、
また、 @code{zeta%pi}が値 @code{false}なら偶数に対しても
名詞形 @code{zeta (@var{n})}を返します。

@code{zeta(1)}は未定義ですが、
Maximaは上からと下からの極限 @code{limit(zeta(x), x, ,1)}を知っています。

@mref{bfzeta}と @mref{zeta%pi}も参照してください。

例：


@c ===beg===
@c zeta([-2, -1, 0, 0.5, 2, 3,1+%i]);
@c limit(zeta(x),x,1,plus);
@c limit(zeta(x),x,1,minus);
@c ===end===
@example
(%i1) zeta([-2, -1, 0, 0.5, 2, 3, 1+%i]);
                                             2
            1     1                       %pi
(%o1) [0, - --, - -, - 1.460354508809586, ----, zeta(3),
            12    2                        6
                                                    zeta(%i + 1)]
(%i2) limit(zeta(x),x,1,plus);
(%o2)                          inf
(%i3) limit(zeta(x),x,1,minus);
(%o3)                         minf
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zeta%pi}
@defvr {オプション変数} zeta%pi
デフォルト値: @mref{true}

@code{zeta%pi}が @code{true}の時、
偶数 @code{n}に対して @code{zeta}は @code{%pi^n}に比例する式を返します。
そうでないなら、
偶数 @code{n}に対して @code{zeta}は名詞形 @code{zeta (n)}を返します。

例:

@c ===beg===
@c zeta%pi: true$
@c zeta (4);
@c zeta%pi: false$
@c zeta (4);
@c ===end===
@example
(%i1) zeta%pi: true$
(%i2) zeta (4);
                                 4
                              %pi
(%o2)                         ----
                               90
(%i3) zeta%pi: false$
(%i4) zeta (4);
(%o4)                        zeta(4)
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@anchor{zn_add_table}
@deffn {関数} zn_add_table (@var{n})

(Z/@var{n}Z)のすべての要素の加算表を表示します。

@mref{zn_mult_table}, @mref{zn_power_table}も参照してください。

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zn_characteristic_factors}
@deffn {関数} zn_characteristic_factors (@var{n})

@var{n}のトーティエントの特性因子を含むリストを返します。

特性因子を使って、 @var{n}を法とする乗法群を巡回部分群の群直積として表現できます。

群自身が巡回的の時には、リストはトーティエントのみを含み、
@code{zn_primroot}を使って使って生成元を計算できます。
もしトーティエントが複数の特性因子に分割されるなら、
@code{zn_factor_generators}は対応する部分群の生成元を見つけます。

リストの @code{r}個の因子のそれぞれは右に続く因子を割り切ります。
従って、最後の因子 @code{f_r}は
@var{n}と互いに素なすべての @code{a}に対して @code{a^f_r = 1 (mod n)}を満たします。
この因子は Carmichael函数や Carmichaelラムダとしても知られています。

もし @code{n > 2}なら、 @code{totient(n)/2^r}は平方剰余の数であり、
これらのそれぞれは @code{2^r}個の平方根を持ちます。

@mref{totient}, @mref{zn_primroot}, @mref{zn_factor_generators}も参照してください。

例:

@code{14}を法とする乗法群は巡回的で、その @code{6}要素は原始根で生成できます。

@example
(%i1) [zn_characteristic_factors(14), phi: totient(14)];
(%o1)                              [[6], 6]
(%i2) [zn_factor_generators(14), g: zn_primroot(14)];
(%o2)                              [[3], 3]
(%i3) M14: makelist(power_mod(g,i,14), i,0,phi-1);
(%o3)                         [1, 3, 9, 13, 11, 5]
@end example

@code{15}を法とする乗法群は巡回的でなかく、その @code{8}要素は2つの因子生成元で生成できます。

@example
(%i1) [[f1,f2]: zn_characteristic_factors(15), totient(15)];
(%o1)                             [[2, 4], 8]
(%i2) [[g1,g2]: zn_factor_generators(15), zn_primroot(15)];
(%o2)                           [[11, 7], false]
(%i3) UG1: makelist(power_mod(g1,i,15), i,0,f1-1);
(%o3)                               [1, 11]
(%i4) UG2: makelist(power_mod(g2,i,15), i,0,f2-1);
(%o4)                            [1, 7, 4, 13]
(%i5) M15: create_list(mod(i*j,15), i,UG1, j,UG2);
(%o5)                      [1, 7, 4, 13, 11, 2, 14, 8]
@end example

最後の特性因子 @code{4}に関して、
@code{M15}の中のすべての @code{a}に対して @code{a^4 = 1 (mod 15)}を満たします。

@code{M15}は2つの特性因子と、@code{8/2^2}平方剰余を持ち、
これらのそれぞれは @code{2^2}個の平方根を持ちます。

@example
(%i6) zn_power_table(15);
                               [ 1   1  1   1 ]
                               [              ]
                               [ 2   4  8   1 ]
                               [              ]
                               [ 4   1  4   1 ]
                               [              ]
                               [ 7   4  13  1 ]
(%o6)                          [              ]
                               [ 8   4  2   1 ]
                               [              ]
                               [ 11  1  11  1 ]
                               [              ]
                               [ 13  4  7   1 ]
                               [              ]
                               [ 14  1  14  1 ]
(%i7) map(lambda([i], zn_nth_root(i,2,15)), [1,4]);
(%o7)                   [[1, 4, 11, 14], [2, 7, 8, 13]]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zn_carmichael_lambda}
@deffn {関数} zn_carmichael_lambda (@var{n})

もし @var{n}が @code{1}なら @code{1}を返し、
そうでなければ、 @var{n}のトーシェントの最大特性因子を返します。

注意と例は @mref{zn_characteristic_factors}を参照してください。

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zn_determinant}
@deffn {関数} zn_determinant (@var{matrix}, @var{p})

LU分解の技法を使って、 (Z/@var{p}Z)上の @var{matrix}の行列式を計算します。
@var{p}は素数でなければいけません。

行列式がゼロに等しい場合、LU分解が失敗するかもしれません。
この場合、 @code{zn_determinant}はモジュラーでない行列式を計算し、その後整理します。

@mref{zn_invert_by_lu}も参照してください。

例:

@example
(%i1) m : matrix([1,3],[2,4]);
                                [ 1  3 ]
(%o1)                           [      ]
                                [ 2  4 ]
(%i2) zn_determinant(m, 5);
(%o2)                               3
(%i3) m : matrix([2,4,1],[3,1,4],[4,3,2]);
                               [ 2  4  1 ]
                               [         ]
(%o3)                          [ 3  1  4 ]
                               [         ]
                               [ 4  3  2 ]
(%i4) zn_determinant(m, 5);
(%o4)                               0
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zn_factor_generators}
@deffn {関数} zn_factor_generators (@var{n})

@var{n}のトーティエントの特性因子に対応する因子生成元を含むリストを返します。

コメントと例に関しては @mref{zn_characteristic_factors}を参照してください。

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zn_invert_by_lu}
@deffn {関数} zn_invert_by_lu (@var{matrix}, @var{p})

LU分解の技法を使って、 (Z/@var{p}Z)上で @var{matrix}のモジュラー逆元を計算します。
@var{p}は素数、 @var{matrix}は可逆でなければいけません。
@var{matrix}が可逆でないなら、 @code{zn_invert_by_lu}は @code{false}を返します。

@mref{zn_determinant}も参照してください。

例:

@example
(%i1) m : matrix([1,3],[2,4]);
                                [ 1  3 ]
(%o1)                           [      ]
                                [ 2  4 ]
(%i2) zn_determinant(m, 5);
(%o2)                               3
(%i3) mi : zn_invert_by_lu(m, 5);
                                [ 3  4 ]
(%o3)                           [      ]
                                [ 1  2 ]
(%i4) matrixmap(lambda([a], mod(a, 5)), m . mi);
                                [ 1  0 ]
(%o4)                           [      ]
                                [ 0  1 ]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zn_log}
@deffn {関数} zn_log @
@fname{zn_log} (@var{a}, @var{g}, @var{n})  @
@fname{zn_log} (@var{a}, @var{g}, @var{n}, [[@var{p1}, @var{e1}], @dots{}, [@var{pk}, @var{ek}]])

離散対数を計算します。
(Z/@var{n}Z)* が巡回群、 @var{g}が @var{n}を法とする原始根とし、 @var{a}がこの群の要素とします。
そのとき、@code{zn_log (a, g, n)}は合同式 @code{g^x = a mod n}を解きます。

採用したアルゴリズムは @code{totient(n)}の素因数分解を必要とします。
この素因数分解はその上時間を消費するかもしれず、いくつかの場合、 最初に素因数分解してそれから因数のリストを 4番目の引数として @code{zn_log}に渡すのが実用的かもしれません。
リストは、デフォルトオプション @code{factors_only : false}を使って
@code{ifactors(totient(n))}が返すリストと同じ形式でなければいけません。

離散対数のために、アルゴリズムは Pohlig-Hellman-縮約と Pollardのロー法を使います。
@code{zn_log}の実行時間は主にtotientの最大素因数のビット長に依存します。

@mref{zn_primroot}, @mref{zn_order}, @mref{ifactors}, @mref{totient}も参照して下さい。

例:

@code{zn_log (a, g, n)}は合同式 @code{g^x = a mod n}を解きます。

@example
(%i1) n : 22$
(%i2) g : zn_primroot(n);
(%o2)                               7
(%i3) ord_7 : zn_order(7, n);
(%o3)                              10
(%i4) powers_7 : makelist(power_mod(g, x, n), x, 0, ord_7 - 1);
(%o4)              [1, 7, 5, 13, 3, 21, 15, 17, 9, 19]
(%i5) zn_log(21, g, n);
(%o5)                               5
(%i6) map(lambda([x], zn_log(x, g, n)), powers_7);
(%o6)                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
@end example

オプションの4番目の引数は @code{ifactors(totient(n))}が返すリストと同じ形式でなければいけません。
実行時間は主にtotientの最大素因数のビット長に依存します。

@example
(%i1) (p : 2^127-1, primep(p));
(%o1)                             true
(%i2) ifs : ifactors(p - 1)$
(%i3) g : zn_primroot(p, ifs);
(%o3)                              43
(%i4) a : power_mod(g, 1234567890, p)$
(%i5) zn_log(a, g, p, ifs);
(%o5)                          1234567890
(%i6) time(%o5);
(%o6)                            [1.204]
(%i7) f_max : last(ifs);
(%o7)                       [77158673929, 1]
(%i8) slength( printf(false, "~b", f_max[1]) );
(%o8)                              37
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zn_mult_table}
@deffn {関数} zn_mult_table @
@fname{zn_mult_table} (@var{n})  @
@fname{zn_mult_table} (@var{n}, @var{gcd})

オプション引数 @var{gcd}がない時、 @code{zn_mult_table(n)}は、
@var{n}と互いに素な (Z/@var{n}Z)*のすべての要素の乗算表を表示します。

オプションの第二引数 @var{gcd}は、(Z/@var{n}Z)の特定のぶぶ集合を選択することを可能にします。
もし @var{gcd}が整数なら、
@code{gcd(x,n) = }@var{gcd}であるすべての剰余 @code{x}の乗算表を返します。
読みやすくするため行と列の見出しも追加されます。
必要なら、これらは @code{submatrix(1, table, 1)}で簡単に取り除くことができます。

もし @var{gcd}として @code{all}を渡したら、
(Z/@var{n}Z)のゼロでないすべての要素を表に印字します。

2番目の例は部分群の乗算表を生成する代わりの方法を提示します。

@mref{zn_add_table}, @mref{zn_power_table}も参照してください。

例:

デフォルトの表は (Z/@var{n}Z)*のすべての要素を表示し、
これでモジュラー乗法群の基本性質を例示したり勉強したりできます。
例えば、主対角線はすべての平方剰余を含み、
それぞれの行と列はすべての要素を含み、表は対象であるなど。

もし @var{gcd}に @code{all}を与えると、(Z/@var{n}Z)のゼロでない要素すべてを表で表示します。

@example
(%i1) zn_mult_table(8);
                                [ 1  3  5  7 ]
                                [            ]
                                [ 3  1  7  5 ]
(%o1)                           [            ]
                                [ 5  7  1  3 ]
                                [            ]
                                [ 7  5  3  1 ]
(%i2) zn_mult_table(8, all);
                            [ 1  2  3  4  5  6  7 ]
                            [                     ]
                            [ 2  4  6  0  2  4  6 ]
                            [                     ]
                            [ 3  6  1  4  7  2  5 ]
                            [                     ]
(%o2)                       [ 4  0  4  0  4  0  4 ]
                            [                     ]
                            [ 5  2  7  4  1  6  3 ]
                            [                     ]
                            [ 6  4  2  0  6  4  2 ]
                            [                     ]
                            [ 7  6  5  4  3  2  1 ]
@end example

もし @var{gcd}が整数なら、
見やすくするため行と列の見出しがつきます。

もし @var{gcd}で選ばれた部分集合が群なら、乗算表を生成する別の方法があります。
 @code{1}を単位元として持つ群からの同型写像は読みやすい表を作ります。
 写像はCRTを介して行われます。

@code{T36_4}の第2版の中で、ちょうど表 @code{T9}のように、単位元、ここでは @code{28}、が左上隅に置かれます。

@example
(%i1) T36_4: zn_mult_table(36,4);
                        [ *   4   8   16  20  28  32 ]
                        [                            ]
                        [ 4   16  32  28  8   4   20 ]
                        [                            ]
                        [ 8   32  28  20  16  8   4  ]
                        [                            ]
(%o1)                   [ 16  28  20  4   32  16  8  ]
                        [                            ]
                        [ 20  8   16  32  4   20  28 ]
                        [                            ]
                        [ 28  4   8   16  20  28  32 ]
                        [                            ]
                        [ 32  20  4   8   28  32  16 ]
(%i2) T9: zn_mult_table(36/4);
                             [ 1  2  4  5  7  8 ]
                             [                  ]
                             [ 2  4  8  1  5  7 ]
                             [                  ]
                             [ 4  8  7  2  1  5 ]
(%o2)                        [                  ]
                             [ 5  1  2  7  8  4 ]
                             [                  ]
                             [ 7  5  1  8  4  2 ]
                             [                  ]
                             [ 8  7  5  4  2  1 ]
(%i3) T36_4: matrixmap(lambda([x], chinese([0,x],[4,9])), T9);
                          [ 28  20  4   32  16  8  ]
                          [                        ]
                          [ 20  4   8   28  32  16 ]
                          [                        ]
                          [ 4   8   16  20  28  32 ]
(%o3)                     [                        ]
                          [ 32  28  20  16  8   4  ]
                          [                        ]
                          [ 16  32  28  8   4   20 ]
                          [                        ]
                          [ 8   16  32  4   20  28 ]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zn_nth_root}
@deffn {関数} zn_nth_root @
@fname{zn_nth_root} (@var{x}, @var{n}, @var{m})  @
@fname{zn_nth_root} (@var{x}, @var{n}, @var{m}, [[@var{p1}, @var{e1}], @dots{}, [@var{pk}, @var{ek}]])

@var{x}を含む (Z/@var{m}Z)の乗法部分群から @var{x}の @var{n}乗根すべてのリストを返します。
もし @var{x}が法 @var{m}に対する n冪剰余でないか、
(Z/@var{m}Z)のどの乗法部分群にも含まれないなら、
@code{false}を返します。

もし最大公約数 @code{g = gcd(x,m)}が @code{m/g}と互いに素なら、
@var{x}は法 @var{m}に対する乗法部分群の要素です。

@code{zn_nth_root}は Adlemanと Manders、 Millerによるアルゴリズムと
Daniel Shanksによるモジュラー乗法群に関する定理に基づいています。

アルゴリズムはモジュラス @var{m}の素因数分解を必要とします。
@var{m}の因数分解がわかっている場合、4番目の引数として因子のリストを渡すことができます。
このオプション引数は
デフォルトオプション @code{factors_only: false}を使った時
@code{ifactors(m)}が返すリストと同じ形式のものでなければいけません。


例:

@var{n}が @code{1}から@code{6}までの値をとる、
@code{1}の @var{n}番目の根すべてを含むリストのリストが続く
@code{14}を法とする乗法群のべきテーブル

@example
(%i1) zn_power_table(14);
                         [ 1   1   1   1   1   1 ]
                         [                       ]
                         [ 3   9   13  11  5   1 ]
                         [                       ]
                         [ 5   11  13  9   3   1 ]
(%o1)                    [                       ]
                         [ 9   11  1   9   11  1 ]
                         [                       ]
                         [ 11  9   1   11  9   1 ]
                         [                       ]
                         [ 13  1   13  1   13  1 ]
(%i2) makelist(zn_nth_root(1,n,14), n,1,6);
(%o2)  [[1], [1, 13], [1, 9, 11], [1, 13], [1], [1, 3, 5, 9, 11, 13]]
@end example

以下の例では @var{x}は @var{m}と互いに素ではないですが、
(Z/@var{m}Z)の乗法部分群の要素であり、
任意の n乗根は同じ部分群の要素です。

剰余クラス @code{3}は どの (Z/63Z)の乗法部分群の要素でもなく、
なので @code{27}の3乗根として返されません。

ここで @code{zn_power_table}は
@code{gcd(x,63) = 9}が成り立つ (Z/63Z)のすべての剰余 @code{x}を表示します。
この部分群は (Z/7Z)*に同型で、単位元 @code{36}はCRTを介して計算されます。

@example
(%i1) m: 7*9$

(%i2) zn_power_table(m,9);
                         [ 9   18  36  9   18  36 ]
                         [                        ]
                         [ 18  9   36  18  9   36 ]
                         [                        ]
                         [ 27  36  27  36  27  36 ]
(%o2)                    [                        ]
                         [ 36  36  36  36  36  36 ]
                         [                        ]
                         [ 45  9   27  18  54  36 ]
                         [                        ]
                         [ 54  18  27  9   45  36 ]
(%i3) zn_nth_root(27,3,m);
(%o3)                           [27, 45, 54]
(%i4) id7:1$  id63_9: chinese([id7,0],[7,9]);
(%o5)                                36
@end example

以下のRSAのような例では、モジュラス @code{N}は平方因子をもちません。
すなわち、排他的に1乗冪因子に分解され、
@code{0}から @code{N-1}までのすべての @code{x}は乗法部分群に含まれます。

解読処理は @code{e}乗根を必要とします。
@code{e}は @code{totient(N)}と互いに素で、なので @code{e}乗根は一意です。
この場合、 @code{zn_nth_root}は効果的に CRT-RSAを実行します。
(@code{flatten}は括弧は取り除きますが解は取り除かないことに注意してください)

@example
(%i1) [p,q,e]: [5,7,17]$  N: p*q$

(%i3) xs: makelist(x,x,0,N-1)$

(%i4) ys: map(lambda([x],power_mod(x,e,N)),xs)$

(%i5) zs: flatten(map(lambda([y], zn_nth_root(y,e,N)), ys))$

(%i6) is(zs = xs);
(%o6)                             true
@end example

以下の例では、モジュラスの因数分解が知られていて、
4番目の引数として渡されます。

@example
(%i1) p: 2^107-1$  q: 2^127-1$  N: p*q$

(%i4) ibase: obase: 16$

(%i5) msg: 11223344556677889900aabbccddeeff$

(%i6) enc: power_mod(msg, 10001, N);
(%o6)    1a8db7892ae588bdc2be25dd5107a425001fe9c82161abc673241c8b383
(%i7) zn_nth_root(enc, 10001, N, [[p,1],[q,1]]);
(%o7)               [11223344556677889900aabbccddeeff]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zn_order}
@deffn {関数} zn_order @
@fname{zn_order} (@var{x}, @var{n})  @
@fname{zn_order} (@var{x}, @var{n}, [[@var{p1}, @var{e1}], @dots{}, [@var{pk}, @var{ek}]])

@var{x}が 有限群 (Z/@var{n}Z)*の単位元ならその次数を返し、そうでないなら @code{false}を返します。
@var{x}は @var{n}と互いに素なら @var{n}を法とする単位元です。

採用したアルゴリズムは @code{totient(n)}の素因数分解を必要とします。
この素因数分解はその上時間を消費するかもしれず、いくつかの場合、 最初に素因数分解してそれから因数のリストを 3番目の引数として @code{zn_order}に渡すのが実用的かもしれません。
リストは、デフォルトオプション @code{factors_only : false}を使って
@code{ifactors(totient(n))}が返すリストと同じ形式でなければいけません。

@mref{zn_primroot}, @mref{ifactors}, @mref{totient}も参照して下さい。

例:

@code{zn_order}は (Z/@var{n}Z)*の単位元 xの次数を計算します。

@example
(%i1) n : 22$
(%i2) g : zn_primroot(n);
(%o2)                               7
(%i3) units_22 : sublist(makelist(i,i,1,21), lambda([x], gcd(x, n) = 1));
(%o3)              [1, 3, 5, 7, 9, 13, 15, 17, 19, 21]
(%i4) (ord_7 : zn_order(7, n)) = totient(n);
(%o4)                            10 = 10
(%i5) powers_7 : makelist(power_mod(g,i,n), i,0,ord_7 - 1);
(%o5)              [1, 7, 5, 13, 3, 21, 15, 17, 9, 19]
(%i6) map(lambda([x], zn_order(x, n)), powers_7);
(%o6)              [1, 10, 5, 10, 5, 2, 5, 10, 5, 10]
(%i7) map(lambda([x], ord_7/gcd(x, ord_7)), makelist(i, i,0,ord_7 - 1));
(%o7)              [1, 10, 5, 10, 5, 2, 5, 10, 5, 10]
(%i8) totient(totient(n));
(%o8)                               4
@end example

オプションの三番目の引数は @code{ifactors(totient(n))}が返すリストと同じ形式でなければいけません。

@example
(%i1) (p : 2^142 + 217, primep(p));
(%o1)                             true
(%i2) ifs : ifactors( totient(p) )$
(%i3) g : zn_primroot(p, ifs);
(%o3)                               3
(%i4) is( (ord_3 : zn_order(g, p, ifs)) = totient(p) );
(%o4)                             true
(%i5) map(lambda([x], ord_3/zn_order(x, p, ifs)), makelist(i,i,2,15));
(%o5)        [22, 1, 44, 10, 5, 2, 22, 2, 8, 2, 1, 1, 20, 1]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zn_power_table}
@deffn {関数} zn_power_table @
@fname{zn_power_table} (@var{n})  @
@fname{zn_power_table} (@var{n}, @var{gcd})  @
@fname{zn_power_table} (@var{n}, @var{gcd}, @var{max_exp})

オプション引数なしの場合、
@code{zn_power_table(n)}は
@var{n}と互いに素なすべての剰余クラスである (Z/@var{n}Z)*のすべての要素のべき表を表示します。
指数は @code{1}から(Carmichael函数や Carmichaelラムダとしても知られる) @code{totient(n)}
の最大特性因子までループし、表は右側1の列で終わります。

オプションの第2引数 @var{gcd}で
(Z/@var{n}Z)の特定の部分集合の冪を選択することができます。
もし @var{gcd}が整数なら、
@code{gcd(x,n) = }@var{gcd}が成立するすべての剰余クラス @code{x}の冪を返します。
すなわち、 @var{gcd}のデフォルト値は @code{1}です。
もし @var{gcd}に @code{all}を渡したら、
表は (Z/@var{n}Z)のすべての要素の冪を含みます。

もしオプションの第3引数 @var{max_exp}を与えると、
指数は@code{1}から @var{max_exp}までループします。

@mref{zn_add_table}, @mref{zn_mult_table}も参照してください。

例:

@var{gcd}@code{ = 1}であるデフォルトでは
例えば FermatやEulerの基本定理を例示したり勉強したりできます。

引数 @var{gcd}で
(Z/@var{n}Z)の部分集合を選択して乗法部分群や同型写像が勉強できます。
例えば、群 @code{G10}と @code{G10_2}は乗算の下でどちらも @code{G5}と同型です。
@code{1}は @code{G5}では単位元です。
それぞれで @code{1}そうなります。
@code{G10}では @code{6}も単位元です、@code{G10_2}
原始根、n乗根などの対応する写像が存在します。

@example
(%i1) zn_power_table(10);
                              [ 1  1  1  1 ]
                              [            ]
                              [ 3  9  7  1 ]
(%o1)                         [            ]
                              [ 7  9  3  1 ]
                              [            ]
                              [ 9  1  9  1 ]
(%i2) zn_power_table(10,2);
                              [ 2  4  8  6 ]
                              [            ]
                              [ 4  6  4  6 ]
(%o2)                         [            ]
                              [ 6  6  6  6 ]
                              [            ]
                              [ 8  4  2  6 ]
(%i3) zn_power_table(10,5);
(%o3)                         [ 5  5  5  5 ]
(%i4) zn_power_table(10,10);
(%o4)                         [ 0  0  0  0 ]
(%i5) G5: [1,2,3,4];
(%o6)                          [1, 2, 3, 4]
(%i6) G10_2: map(lambda([x], chinese([0,x],[2,5])), G5);
(%o6)                          [6, 2, 8, 4]
(%i7) G10: map(lambda([x], power_mod(3, zn_log(x,2,5), 10)), G5);
(%o7)                          [1, 3, 7, 9]
@end example

もし @var{gcd}に @code{all}を渡せば、
表は (Z/@var{n}Z)のすべての要素の冪を含みます。

3番目の引数 @var{max_exp}で最高指数を設定できます。
以下の表は RSAの非常に小さな例を表示します。

@example
(%i1) N:2*5$ phi:totient(N)$ e:7$ d:inv_mod(e,phi)$

(%i5) zn_power_table(N, all, e*d);
       [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ]
       [                                                               ]
       [ 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1 ]
       [                                                               ]
       [ 2  4  8  6  2  4  8  6  2  4  8  6  2  4  8  6  2  4  8  6  2 ]
       [                                                               ]
       [ 3  9  7  1  3  9  7  1  3  9  7  1  3  9  7  1  3  9  7  1  3 ]
       [                                                               ]
       [ 4  6  4  6  4  6  4  6  4  6  4  6  4  6  4  6  4  6  4  6  4 ]
(%o5)  [                                                               ]
       [ 5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5 ]
       [                                                               ]
       [ 6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6 ]
       [                                                               ]
       [ 7  9  3  1  7  9  3  1  7  9  3  1  7  9  3  1  7  9  3  1  7 ]
       [                                                               ]
       [ 8  4  2  6  8  4  2  6  8  4  2  6  8  4  2  6  8  4  2  6  8 ]
       [                                                               ]
       [ 9  1  9  1  9  1  9  1  9  1  9  1  9  1  9  1  9  1  9  1  9 ]
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zn_primroot}
@deffn {関数} zn_primroot @
@fname{zn_primroot} (@var{n})  @
@fname{zn_primroot} (@var{n}, [[@var{p1}, @var{e1}], @dots{}, [@var{pk}, @var{ek}]])

もし乗法群 (Z/@var{n}Z)*が巡回的なら、 @code{zn_primroot}は @var{n}を法とする最小の原始根を計算します。
もし @var{n}が @code{2}, @code{4}, @code{p^k} または @code{2*p^k}に等しいなら (Z/@var{n}Z)* は巡回的です。
ここで @code{p}は素数で @code{2}より大きく @code{k}は自然数です。
もしオプション変数 @mref{zn_primroot_pretest} (デフォルト: @code{false})が @code{true}に設定されているなら
@code{zn_primroot}は条件付き事前テスト(according pretest)を実行します。
どんな場合でも計算は上限 @mref{zn_primroot_limit}で制限されます。

もし (Z/@var{n}Z)*が巡回的でないか @code{zn_primroot_limit}まで原始根がないなら、 @code{zn_primroot}は @code{false}を返します。

採用したアルゴリズムは @code{totient(n)}の素因数分解を必要とします。
この素因数分解はその上時間を消費するかもしれず、いくつかの場合、 最初に素因数分解してそれから因数のリストを 3番目の引数として @code{zn_primroot}に渡すのが実用的かもしれません。

リストは、デフォルトオプション @code{factors_only : false}を使って @code{ifactors(totient(n))}が返すリストと同じ形式でなければいけません。

@mref{zn_primroot_p}, @mref{zn_order}, @mref{ifactors}, @mref{totient}も参照してください。

例:

@code{zn_primroot}は @var{n}を法とする最小原始根を計算するか、 @code{false}を返します。

@example
(%i1) n : 14$
(%i2) g : zn_primroot(n);
(%o2)                               3
(%i3) zn_order(g, n) = totient(n);
(%o3)                             6 = 6
(%i4) n : 15$
(%i5) zn_primroot(n);
(%o5)                             false
@end example

オプションの二番目の引数は　@code{ifactors(totient(n))}が返すリストと同じ形式でなければいけません。

@example
(%i1) (p : 2^142 + 217, primep(p));
(%o1)                             true
(%i2) ifs : ifactors( totient(p) )$
(%i3) g : zn_primroot(p, ifs);
(%o3)                               3
(%i4) [time(%o2), time(%o3)];
(%o4)                    [[15.556972], [0.004]]
(%i5) is(zn_order(g, p, ifs) = p - 1);
(%o5)                             true
(%i6) n : 2^142 + 216$
(%i7) ifs : ifactors(totient(n))$
(%i8) zn_primroot(n, ifs),
      zn_primroot_limit : 200, zn_primroot_verbose : true;
`zn_primroot' stopped at zn_primroot_limit = 200
(%o8)                             false
@end example

@opencatbox
@category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zn_primroot_limit}
@defvr {オプション変数} zn_primroot_limit
デフォルト値: @code{1000}

もし @mref{zn_primroot}が原始根をみつけられないなら、 上限でやめます。
もしオプション変数 @mref{zn_primroot_verbose} (デフォルト: @code{false})が @code{true}に設定されているなら、 @code{zn_primroot_limit}に到達した時メッセージが表示されます。

@opencatbox
@category{Number theory}
@closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@anchor{zn_primroot_p}
@deffn {関数} zn_primroot_p @
@fname{zn_primroot_p} (@var{x}, @var{n})  @
@fname{zn_primroot_p} (@var{x}, @var{n}, [[@var{p1}, @var{e1}], @dots{}, [@var{pk}, @var{ek}]])

@var{x}が乗法群 (Z/@var{n}Z)*の原始根かチェックします。

採用したアルゴリズムは @code{totient(n)}の素因数分解を必要とします。
この素因数分解はその上時間を消費するかもしれず、いくつかの場合、 最初に素因数分解してそれから因数のリストを 3番目の引数として @code{zn_primroot_p}に渡すのが実用的かもしれません。
リストは、デフォルトオプション @code{factors_only : false}を使って @code{ifactors(totient(n))}が返すリストと同じ形式でなければいけません。

@mref{zn_primroot}, @mref{zn_order}, @mref{ifactors}, @mref{totient}も参照して下さい。

例:

述語論理関数としての @code{zn_primroot_p}。

@example
(%i1) n : 14$
(%i2) units_14 : sublist(makelist(i,i,1,13), lambda([i], gcd(i, n) = 1));
(%o2)                     [1, 3, 5, 9, 11, 13]
(%i3) zn_primroot_p(13, n);
(%o3)                            false
(%i4) sublist(units_14, lambda([x], zn_primroot_p(x, n)));
(%o4)                            [3, 5]
(%i5) map(lambda([x], zn_order(x, n)), units_14);
(%o5)                      [1, 6, 6, 3, 3, 2]
@end example

オプションの三番目の引数は @code{ifactors(totient(n))}が返すリストと同じ形式でなければいけません。

@example
(%i1) (p : 2^142 + 217, primep(p));
(%o1)                             true
(%i2) ifs : ifactors( totient(p) )$
(%i3) sublist(makelist(i,i,1,50), lambda([x], zn_primroot_p(x, p, ifs)));
(%o3)      [3, 12, 13, 15, 21, 24, 26, 27, 29, 33, 38, 42, 48]
(%i4) [time(%o2), time(%o3)];
(%o4)                   [[7.748484], [0.036002]]
@end example

@opencatbox
@category{Predicate functions} @category{Number theory}
@closecatbox
@end deffn

@c -----------------------------------------------------------------------------
@anchor{zn_primroot_pretest}
@defvr {オプション変数} zn_primroot_pretest
デフォルト値: @code{false}

もし @var{n}が @code{2}, @code{4}, @code{p^k}か @code{2*p^k}なら 乗法群 (Z/@var{n}Z)*は巡回的です。
ここで @code{p}は素数で @code{2}より大きく、 @code{k}は自然数です。

@code{zn_primroot_pretest}は @mref{zn_primroot}が 最小原始根を計算する前にこれらの場合の１つが起こるかどうかチェックするかどうか制御します。
@code{zn_primroot_pretest}が @code{true}に設定されているときだけ、 これの事前テストが実行されます。

@opencatbox
@category{Number theory}
@closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@anchor{zn_primroot_verbose}
@defvr {オプション変数} zn_primroot_verbose
デフォルト値: @code{false}

@mref{zn_primroot_limit}に達したとき、 @mref{zn_primroot}がメッセージを表示するかどうか制御します。

@opencatbox
@category{Number theory}
@closecatbox
@end defvr
