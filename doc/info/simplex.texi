@menu
* Introduction to simplex::
* Functions and Variables for simplex::
@end menu

@node Introduction to simplex, Functions and Variables for simplex, simplex-pkg, simplex-pkg
@section Introduction to simplex

@code{simplex}はシンプレックスアルゴリズムを使った線形最適化のパッケージです。

例:

@c ===beg===
@c load("simplex")$
@c minimize_lp(x+y, [3*x+2*y>2, x+4*y>3]);
@c ===end===
@example
(%i1) load("simplex")$
(%i2) minimize_lp(x+y, [3*x+2*y>2, x+4*y>3]);
                  9        7       1
(%o2)            [--, [y = --, x = -]]
                  10       10      5
@end example

@opencatbox
@category{Numerical methods} @category{Optimization} @category{Share packages} @category{Package simplex}
@closecatbox

@subsection Tests for simplex

ディレクトリ @code{share/simplex/Tests}にいくつかテストがあります。

@subsubsection klee_minty

関数 @code{klee_minty}は
@code{linear_program}のための入力を生成します。
入力に関してスケーリングなしには解くためには指数時間が要求されます。

例:

@example
load(klee_minty)$
apply(linear_program, klee_minty(6));
@end example

よりよいアプローチ:

@example
epsilon_sx : 0$
scale_sx : true$
apply(linear_program, klee_minty(10));
@end example

@subsubsection NETLIB

netlib (@url{http://www.netlib.org/lp/data/}) テストスイートからいくつかのより小さい問題が
Maximaが可読なフォーマットに変換されます。
問題は @code{adlittle}, @code{afiro}, @code{kb2}, @code{sc50a}です。
それぞれの問題は、行列 @var{A} とベクトル @var{b}と @var{c}のため、CSVフォーマットの3つの入力ファイルを持ちます。

例:

@example
A : read_matrix("adlittle_A.csv", 'csv)$
b : read_list("adlittle_b.csv", 'csv)$
c : read_list("adlittle_c.csv", 'csv)$
linear_program(A, b, c)$
%[2]
=> 225494.963126615
@end example

結果:

@example
PROBLEM        MINIMUM                SCALING
adlittle       225494.963126615       no
afiro          - 464.7531428571429    no
kb2            - 1749.900129055996    yes
sc50a          - 64.5750770585645     no
@end example

@node Functions and Variables for simplex,  , Introduction to simplex, simplex-pkg
@section Functions and Variables for simplex

@anchor{epsilon_lp}
@defvr {オプション変数} epsilon_lp
デフォルト値: @code{10^-8}

@code{linear_program}の数値計算で使われるイプシロン。

以下も参照してください: @mref{linear_program}

@opencatbox
@category{Package simplex}
@closecatbox

@end defvr

@anchor{linear_program}
@deffn {関数} linear_program (@var{A}, @var{b}, @var{c})

@code{linear_program}はシンプレックスアルゴリズムの実装です。
@code{linear_program(A, b, c)}は、
@code{A.x = b}かつ @code{x >= 0}を満たすベクトルの中で
@code{c.x}が可能な最小となるベクトル @var{x}を計算します。
引数 @var{A}は行列で、引数 @var{b}と @var{c}はリストです。

@code{linear_program}は、最小化ベクトル @var{x}と最小値
@code{c.x}を含むリストを返します。
もし問題が有界でないなら、 "Problem not bounded!"を返し、
もし問題が実現可能でないなら、 "Problem not feasible!"を返します。

この関数を使うためには、最初に @code{load(simplex);}で
@code{simplex}パッケージをロードしてください。

例:

@c ===beg===
@c A: matrix([1,1,-1,0], [2,-3,0,-1], [4,-5,0,0])$
@c b: [1,1,6]$
@c c: [1,-2,0,0]$
@c linear_program(A, b, c);
@c ===end===
@example
(%i2) A: matrix([1,1,-1,0], [2,-3,0,-1], [4,-5,0,0])$
(%i3) b: [1,1,6]$
(%i4) c: [1,-2,0,0]$
(%i5) linear_program(A, b, c);
                   13     19        3
(%o5)            [[--, 4, --, 0], - -]
                   2      2         2
@end example

以下も参照してください: @code{minimize_lp}, @code{scale_lp}, @code{epsilon_lp}

@opencatbox
@category{Package simplex} @category{Numerical methods}
@closecatbox

@end deffn

@anchor{maximize_lp}
@deffn {関数} maximize_lp (@var{obj}, @var{cond}, [@var{pos}])

いくつかの線形制約 @var{cond}に従う線形目標関数 @var{obj}を最大化します。
引数と戻り値の詳細な記述に関しては、
@mref{minimize_lp}を参照してください。


以下も参照してください: @mref{minimize_lp}.

@opencatbox
@category{Package simplex} @category{Numerical methods}
@closecatbox

@end deffn

@anchor{minimize_lp}
@deffn {関数} minimize_lp (@var{obj}, @var{cond}, [@var{pos}])

いくつかの線形制約 @var{cond}に従う線形目標関数 @var{obj}を最小化します。
@var{cond}は線形等式や不等式のリストです。
厳密な不等式では、 @code{>}は @code{>=}に、
@code{<}は @code{<=}に置き換えられます。
オプションの引数 @var{pos}は正と仮定される決定変数のリストです。

もし最小が存在するなら、
@code{minimize_lp}は目標関数の最小値と最小が得られる決定変数値のリストを含むリストです。
もし問題が有界でないなら、
@code{minimize_lp}は "Problem not bounded!"を返し、
もし問題が実現可能でないなら、 "Ploblem not feasible!"を返します。

決定変数はデフォルトでは非負とは仮定されません。
もし決定変数すべてが正なら、
@code{nonegative_lp}を @code{true}に設定してください。
もし決定変数のいくつかだけが正なら、オプション引数
@var{pos}の中でそれらをリストしてください。
 (これは制約を足すより効率的だということに注意してください。)

@code{minimize_lp}は Maximaの
@code{linear_program}関数で実装されたシンプレックスアルゴリズムを使います。

この関数を使うためには、最初に @code{load(simplex);}で
@code{simplex}パッケージをロードしてください。

例:

@c ===beg===
@c minimize_lp(x+y, [3*x+y=0, x+2*y>2]);
@c minimize_lp(x+y, [3*x+y>0, x+2*y>2]), nonegative_lp=true;
@c minimize_lp(x+y, [3*x+y=0, x+2*y>2]), nonegative_lp=true;
@c minimize_lp(x+y, [3*x+y>0]);
@c ===end===
@example
(%i1) minimize_lp(x+y, [3*x+y=0, x+2*y>2]);
                      4       6        2
(%o1)                [-, [y = -, x = - -]]
                      5       5        5
(%i2) minimize_lp(x+y, [3*x+y>0, x+2*y>2]), nonegative_lp=true;
(%o2)                [1, [y = 1, x = 0]]
(%i3) minimize_lp(x+y, [3*x+y=0, x+2*y>2]), nonegative_lp=true;
(%o3)                Problem not feasible!
(%i4) minimize_lp(x+y, [3*x+y>0]);
(%o4)                Problem not bounded!
@end example


いかも参照してください: @mref{maximize_lp}, @mref{nonegative_lp}, @mref{epsilon_lp}。

@opencatbox
@category{Package simplex} @category{Numerical methods}
@closecatbox

@end deffn

@anchor{nonegative_lp}
@defvr {オプション変数} nonegative_lp
デフォルト値: @code{false}

もし @code{nonegative_lp}が trueなら、
@code{minimize_lp}と @code{maximize_lp}の決定変数すべては正と仮定されます。

以下も参照してください: @mref{minimize_lp}。

@opencatbox
@category{Package simplex}
@closecatbox

@end defvr

@anchor{scale_lp}
@defvr {オプション変数} scale_lp
デフォルト値: @code{false}

@code{scale_lp}が @code{true}の時、
@code{linear_program}は行や列それぞれの最大絶対値が1になるように入力をスケールします。

@opencatbox
@category{Package simplex}
@closecatbox

@end defvr

@anchor{pivot_count_sx}
@defvr {変数} pivot_count_sx

@code{linear_program}が戻った後、
@code{pivot_count_sx}は最後の計算のピボットの数です。

@opencatbox
@category{Package simplex}
@closecatbox

@end defvr

@anchor{pivot_max_sx}
@defvr {変数} pivot_max_sx

@code{pivot_max_sx}は
@code{linear_program}が許すピボットの最大数です。

@opencatbox
@category{Package simplex}
@closecatbox

@end defvr
