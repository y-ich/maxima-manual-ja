@menu
* Functions and Variables for diag::
@end menu

@node Functions and Variables for diag,  , diag-pkg, diag-pkg
@section Functions and Variables for diag


@anchor{diag_function}
@deffn {関数} diag (@var{lm})

@var{lm}の要素のブロックサムである行列を構成します。
@var{lm}の要素は行列だと仮定します; もし要素がスカラーなら、1x1の行列として扱います。

@var{lm}の要素それぞれが正方なら、結果の行列は正方になります。

例:
@example
(%i1) load("diag")$

(%i2) a1:matrix([1,2,3],[0,4,5],[0,0,6])$

(%i3) a2:matrix([1,1],[1,0])$

(%i4) diag([a1,x,a2]);
                   [ 1  2  3  0  0  0 ]
                   [                  ]
                   [ 0  4  5  0  0  0 ]
                   [                  ]
                   [ 0  0  6  0  0  0 ]
(%o4)              [                  ]
                   [ 0  0  0  x  0  0 ]
                   [                  ]
                   [ 0  0  0  0  1  1 ]
                   [                  ]
                   [ 0  0  0  0  1  0 ]
(%i5) diag ([matrix([1,2]), 3]);
                        [ 1  2  0 ]
(%o5)                   [         ]
                        [ 0  0  3 ]
@end example

この関数を使うためには最初に @code{load("diag")}と書いてください。

@opencatbox
@category{Matrices} @category{Share packages} @category{Package diag}
@closecatbox

@end deffn


@anchor{JF}
@deffn {関数} JF (@var{lambda},@var{n})

固有値 @var{lambda}を持つ次数 @var{n}の Jordan細胞を返します。

例:
@example
(%i1) load("diag")$

(%i2) JF(2,5);
                    [ 2  1  0  0  0 ]
                    [               ]
                    [ 0  2  1  0  0 ]
                    [               ]
(%o2)               [ 0  0  2  1  0 ]
                    [               ]
                    [ 0  0  0  2  1 ]
                    [               ]
                    [ 0  0  0  0  2 ]
(%i3) JF(3,2);
                         [ 3  1 ]
(%o3)                    [      ]
                         [ 0  3 ]
@end example

この関数を使うためには最初に @code{load("diag")}と書いてください。

@opencatbox
@category{Package diag}
@closecatbox

@end deffn


@anchor{jordan}
@deffn {関数} jordan (@var{mat})
行列 @var{mat}の特別な形式でリストにエンコードされた Jordan形を返します。
対応する行列を得るには、
@code{jordan}の出力を引数として使って関数 @code{dispJordan}をコールしてください。

戻り値のリストの要素はそれ自身リストです。
それぞれの一番目の要素は @var{mat}の固有値です。
残りの要素はこの固有値に関するJordanブロックの長さ(正の整数)です。
これらの整数は降順で並びます。
固有値は繰り返されません。

関数 @code{dispJordan}, @code{minimalPoly}, @code{ModeMatrix}は、
@code{jordan}を呼び出した出力を引数として期待します。
もしこの引数を、 @code{jordan}を呼び出さず手で構成するなら、
それぞれの固有値が一度だけ現れること、ブロックサイズが降順で並ぶことを保証しなくてはいけません。
そうでなければ、関数は正しくない答えを返すかもしれません。

例:
@c ===beg===
@c load("diag")$
@c A: matrix([2,0,0,0,0,0,0,0],
@c                 [1,2,0,0,0,0,0,0],
@c                 [-4,1,2,0,0,0,0,0],
@c                 [2,0,0,2,0,0,0,0],
@c                 [-7,2,0,0,2,0,0,0],
@c                 [9,0,-2,0,1,2,0,0],
@c                 [-34,7,1,-2,-1,1,2,0],
@c                 [145,-17,-16,3,9,-2,0,3])$
@c jordan (A);
@c dispJordan (%);
@c ===end===
@example
(%i1) load("diag")$
@group
(%i2) A: matrix([2,0,0,0,0,0,0,0],
                [1,2,0,0,0,0,0,0],
                [-4,1,2,0,0,0,0,0],
                [2,0,0,2,0,0,0,0],
                [-7,2,0,0,2,0,0,0],
                [9,0,-2,0,1,2,0,0],
                [-34,7,1,-2,-1,1,2,0],
                [145,-17,-16,3,9,-2,0,3])$
@end group
@group
(%i3) jordan (A);
(%o3)                [[2, 3, 3, 1], [3, 1]]
@end group
(%i4) dispJordan (%);
                   [ 2  1  0  0  0  0  0  0 ]
                   [                        ]
                   [ 0  2  1  0  0  0  0  0 ]
                   [                        ]
                   [ 0  0  2  0  0  0  0  0 ]
                   [                        ]
                   [ 0  0  0  2  1  0  0  0 ]
(%o4)              [                        ]
                   [ 0  0  0  0  2  1  0  0 ]
                   [                        ]
                   [ 0  0  0  0  0  2  0  0 ]
                   [                        ]
                   [ 0  0  0  0  0  0  2  0 ]
                   [                        ]
                   [ 0  0  0  0  0  0  0  3 ]
@end example

この関数を使うためには最初に @code{load("diag")}と書いてください。
@mref{dispJordan}と @mref{minimalPoly}も参照してください。

@opencatbox
@category{Package diag}
@closecatbox

@end deffn


@anchor{dispJordan}
@deffn {関数} dispJordan (@var{l})

@var{l}で与えられた固有値と重複度のリストに対応した行列をJordan標準形で返します。
このリストはは関数 @mref{jordan}が与える形式でなければいけません。
この形式の詳細は @mref{jordan}を参照してください。

例:
@example
(%i1) load("diag")$

(%i2) b1:matrix([0,0,1,1,1],
                [0,0,0,1,1],
                [0,0,0,0,1],
                [0,0,0,0,0],
                [0,0,0,0,0])$

(%i3) jordan(b1);
(%o3)                  [[0, 3, 2]]
(%i4) dispJordan(%);
                    [ 0  1  0  0  0 ]
                    [               ]
                    [ 0  0  1  0  0 ]
                    [               ]
(%o4)               [ 0  0  0  0  0 ]
                    [               ]
                    [ 0  0  0  0  1 ]
                    [               ]
                    [ 0  0  0  0  0 ]
@end example

この関数を使うためには最初に @code{load("diag")}と書いてください。
@mref{jordan}と @mref{minimalPoly}も参照してください。

@opencatbox
@category{Package diag}
@closecatbox

@end deffn


@anchor{minimalPoly}
@deffn {関数} minimalPoly (@var{l})

Maximaリスト@var{l}で与えられたコードに関連付けられた最小多項式を返します。
@var{l}は関数 @mref{jordan}が与える出力です。
この形式の詳細については @mref{jordan}を参照してください。

例:
@example
(%i1) load("diag")$

(%i2) a:matrix([2,1,2,0],
               [-2,2,1,2],
               [-2,-1,-1,1],
               [3,1,2,-1])$

(%i3) jordan(a);
(%o3)               [[- 1, 1], [1, 3]]
(%i4) minimalPoly(%);
                            3
(%o4)                (x - 1)  (x + 1)
@end example

この関数を使うためには最初に @code{load("diag")}と書いてください。
@mref{jordan}と @mref{dispJordan}も参照してください。

@opencatbox
@category{Package diag}
@closecatbox

@end deffn

@anchor{ModeMatrix}
@deffn {関数} ModeMatrix (@var{A}, [@var{jordan_info}])

@math{(M^^-1).A.M}が @var{A}の Jordan形になるような可逆行列 @var{M}を返します。

これを計算するために、Maximaは @var{A}の Jordan形を見つけなければいけません。
それは非常に重い計算になる可能性があります。
もし既に @mref{jordan}を以前に呼び出して計算したなら、二番目の引数 @var{jordan_info}にそれを渡してください。
要求される形式の詳細は @mref{jordan}を参照してください。

例:
@c ===beg===
@c load("diag")$
@c A: matrix([2,1,2,0], [-2,2,1,2], [-2,-1,-1,1], [3,1,2,-1])$
@c M: ModeMatrix (A);
@c is ((M^^-1) . A . M = dispJordan (jordan (A)));
@c ===end===
@example
(%i1) load("diag")$
(%i2) A: matrix([2,1,2,0], [-2,2,1,2], [-2,-1,-1,1], [3,1,2,-1])$
(%i3) M: ModeMatrix (A);
                      [  1    - 1   1   1 ]
                      [                   ]
                      [   1               ]
                      [ - -   - 1   0   0 ]
                      [   9               ]
                      [                   ]
(%o3)                 [   13              ]
                      [ - --   1   - 1  0 ]
                      [   9               ]
                      [                   ]
                      [  17               ]
                      [  --   - 1   1   1 ]
                      [  9                ]
@group
(%i4) is ((M^^-1) . A . M = dispJordan (jordan (A)));
(%o4)                         true
@end group
@end example

この例で、@code{A}の Jordan形が２回計算されていることに注意してください。
これを避けるには、 @code{jordan(A)}の出力を変数に保存して、それを @code{jordan}と @code{dispJordan}に渡します。

この関数を使うためには最初に @code{load("diag")}と書いてください。
@mref{jordan}と @mref{dispJordan}も参照してください。

@opencatbox
@category{Package diag}
@closecatbox

@end deffn


@anchor{mat_function}
@deffn {関数} mat_function (@var{f},@var{A})

@math{f(A)}を返します。
ここで @var{f}は解析関数で @var{A}は行列です。
この計算は @var{f}のTaylor展開に基づきます。
数値評価には効率的ではありませんが、小さな行列に関して記号的な答えを出すことができます。

@c What other methods do we have in Maxima at the moment? We should
@c probably give links here...

例 1:

行列の指数関数。
出力が非常に大きいので、答えの一番目の行だけを求めます。
@c ===beg===
@c load("diag")$
@c A: matrix ([0,1,0], [0,0,1], [-1,-3,-3])$
@c ratsimp (mat_function (exp, t*A)[1]);
@c ===end===
@example
(%i1) load("diag")$
(%i2) A: matrix ([0,1,0], [0,0,1], [-1,-3,-3])$
@group
(%i3) ratsimp (mat_function (exp, t*A)[1]);
           2              - t                   2   - t
         (t  + 2 t + 2) %e       2        - t  t  %e
(%o3)   [--------------------, (t  + t) %e   , --------]
                  2                               2
@end group
@end example

例 2:

指数関数に関するTaylor級数との比較。
また、 @code{exp(%i*A)}をsine, cosineと比較。
@c ===beg===
@c load("diag")$
@c A: matrix ([0,1,1,1],
@c                  [0,0,0,1],
@c                  [0,0,0,1],
@c                  [0,0,0,0])$
@c ratsimp (mat_function (exp, t*A));
@c minimalPoly (jordan (A));
@c ratsimp (ident(4) + t*A + 1/2*(t^2)*A^^2);
@c ratsimp (mat_function (exp, %i*t*A));
@c ratsimp (mat_function (cos, t*A) + %i*mat_function (sin, t*A));
@c ===end===
@example
(%i1) load("diag")$
@group
(%i2) A: matrix ([0,1,1,1],
                 [0,0,0,1],
                 [0,0,0,1],
                 [0,0,0,0])$
@end group
@group
(%i3) ratsimp (mat_function (exp, t*A));
                       [           2     ]
                       [ 1  t  t  t  + t ]
                       [                 ]
(%o3)                  [ 0  1  0    t    ]
                       [                 ]
                       [ 0  0  1    t    ]
                       [                 ]
                       [ 0  0  0    1    ]
@end group
@group
(%i4) minimalPoly (jordan (A));
                                3
(%o4)                          x
@end group
@group
(%i5) ratsimp (ident(4) + t*A + 1/2*(t^2)*A^^2);
                       [           2     ]
                       [ 1  t  t  t  + t ]
                       [                 ]
(%o5)                  [ 0  1  0    t    ]
                       [                 ]
                       [ 0  0  1    t    ]
                       [                 ]
                       [ 0  0  0    1    ]
@end group
@group
(%i6) ratsimp (mat_function (exp, %i*t*A));
                  [                        2 ]
                  [ 1  %i t  %i t  %i t - t  ]
                  [                          ]
(%o6)             [ 0   1     0      %i t    ]
                  [                          ]
                  [ 0   0     1      %i t    ]
                  [                          ]
                  [ 0   0     0        1     ]
@end group
@group
(%i7) ratsimp (mat_function (cos, t*A) + %i*mat_function (sin, t*A));
                  [                        2 ]
                  [ 1  %i t  %i t  %i t - t  ]
                  [                          ]
(%o7)             [ 0   1     0      %i t    ]
                  [                          ]
                  [ 0   0     1      %i t    ]
                  [                          ]
                  [ 0   0     0        1     ]
@end group
@end example

例 3:

べき演算。
@c ===beg===
@c load("diag")$
@c A: matrix([1,2,0], [0,1,0], [1,0,1])$
@c integer_pow(x) := block ([k], declare (k, integer), x^k)$
@c mat_function (integer_pow, A);
@c A^^20;
@c ===end===
@example
(%i1) load("diag")$
(%i2) A: matrix([1,2,0], [0,1,0], [1,0,1])$
(%i3) integer_pow(x) := block ([k], declare (k, integer), x^k)$
@group
(%i4) mat_function (integer_pow, A);
                       [ 1     2 k     0 ]
                       [                 ]
(%o4)                  [ 0      1      0 ]
                       [                 ]
                       [ k  (k - 1) k  1 ]
@end group
@group
(%i5) A^^20;
                         [ 1   40   0 ]
                         [            ]
(%o5)                    [ 0    1   0 ]
                         [            ]
                         [ 20  380  1 ]
@end group
@end example

この関数を使うためには最初に @code{load("diag")}と書いてください。

@opencatbox
@category{Package diag}
@closecatbox

@end deffn
