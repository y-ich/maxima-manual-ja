@menu
* Introduction to contrib_ode::
* Functions and Variables for contrib_ode::
* Possible improvements to contrib_ode::
* Test cases for contrib_ode::
* References for contrib_ode::
@end menu

@node Introduction to contrib_ode, Functions and Variables for contrib_ode, contrib_ode-pkg, contrib_ode-pkg

@section Introduction to contrib_ode

Maximaの常微分方程式 (ODE)ソルバ @code{ode2}は一階と二階の初等線形 ODEを解きます。
関数 @code{contrib_ode}は線形と非線形一階 ODEと線形斉次二階 ODEに関する追加の方法で
@code{ode2}を拡張します。
コードはまだ開発中で、コールの順序は将来のリリースで変わるかもしれません。
一旦コードが安定化したら、投稿ディレクトリから移して Maximaに統合されるかもしれません。

このパッケージは、使用前にコマンド
@code{load('contrib_ode)}でロードしなければいけません。

@code{contrib_ode}のコール取り決めは @code{ode2}と同一です。
３つの引数を取ります:
ODE (右辺が 0なら左辺だけでもいいです)、
従属変数、独立変数。
成功した時、解のリストを返します。

解の形式は @code{ode2}と異なります。
非線形方程式は複数解を持つので、
@code{contrib_ode}は解のリストを返します。
解それぞれは複数の形式を持ちます:
@itemize @bullet
@item
従属変数の陽解、

@item
従属変数の陰解、

@item
変数 @code{%t}を使ったパラメトリック解、または、

@item
変数 @code{%u}に関する別のODEへの変換

@end itemize

@code{%c}は一階方程式の積分定数を表すのに使われます。
@code{%k1}と @code{%k2}は二階方程式の定数を表すのに使われます。
もし @code{contrib_ode}がいかなる理由でも解を得られないなら、
たぶんエラーメッセージを印字した後 @code{false}を返します。

一階非線形 ODEは複数解を持ち得るので、解のリストを返す必要があります。
例えば:

@c ===beg===
@c load('contrib_ode)$
@c eqn:x*'diff(y,x)^2-(1+x*y)*'diff(y,x)+y=0;
@c contrib_ode(eqn,y,x);
@c method;
@c ===end===
@example
(%i1) load('contrib_ode)$
@group
(%i2) eqn:x*'diff(y,x)^2-(1+x*y)*'diff(y,x)+y=0;
                    dy 2             dy
(%o2)            x (--)  - (1 + x y) -- + y = 0
                    dx               dx
@end group
@group
(%i3) contrib_ode(eqn,y,x);
                    dy 2             dy
(%t3)            x (--)  - (1 + x y) -- + y = 0
                    dx               dx

              first order equation not linear in y'

                                             x
(%o3)             [y = log(x) + %c, y = %c %e ]
@end group
@group
(%i4) method;
(%o4)                        factor
@end group
@end example

以下の例の二番目の解のように、
非線形ODEは積分定数を持たない特異解を持ち得ます:

@c ===beg===
@c load('contrib_ode)$
@c eqn:'diff(y,x)^2+x*'diff(y,x)-y=0;
@c contrib_ode(eqn,y,x);
@c method;
@c ===end===
@example
(%i1) load('contrib_ode)$
@group
(%i2) eqn:'diff(y,x)^2+x*'diff(y,x)-y=0;
                       dy 2     dy
(%o2)                 (--)  + x -- - y = 0
                       dx       dx
@end group
(%i3) contrib_ode(eqn,y,x);
                       dy 2     dy
(%t3)                 (--)  + x -- - y = 0
                       dx       dx

              first order equation not linear in y'

                                           2
                                 2        x
(%o3)              [y = %c x + %c , y = - --]
                                          4
@group
(%i4) method;
(%o4)                       clairault
@end group
@end example


以下の ODEはダミー変数 @code{%t}を使った２つのパラメトリック解を持ちます。
この場合、パラメトリック解を操作して陽解を与えることができます。

@c ===beg===
@c load('contrib_ode)$
@c eqn:'diff(y,x)=(x+y)^2;
@c contrib_ode(eqn,y,x);
@c method;
@c ===end===
@example
(%i1) load('contrib_ode)$
@group
(%i2) eqn:'diff(y,x)=(x+y)^2;
                          dy          2
(%o2)                     -- = (x + y)
                          dx
@end group
@group
(%i3) contrib_ode(eqn,y,x);
(%o3) [[x = %c - atan(sqrt(%t)), y = (- x) - sqrt(%t)],
                     [x = atan(sqrt(%t)) + %c, y = sqrt(%t) - x]]
@end group
@group
(%i4) method;
(%o4)                       lagrange
@end group
@end example

以下の例 (Kamke 1.112)は陰解を例示します。

@c ===beg===
@c load('contrib_ode)$
@c assume(x>0,y>0);
@c eqn:x*'diff(y,x)-x*sqrt(y^2+x^2)-y;
@c contrib_ode(eqn,y,x);
@c method;
@c ===end===
@example
(%i1) load('contrib_ode)$
@group
(%i2) assume(x>0,y>0);
(%o2)                    [x > 0, y > 0]
@end group
@group
(%i3) eqn:x*'diff(y,x)-x*sqrt(y^2+x^2)-y;
                     dy           2    2
(%o3)              x -- - x sqrt(y  + x ) - y
                     dx
@end group
@group
(%i4) contrib_ode(eqn,y,x);
                                  y
(%o4)                  [x - asinh(-) = %c]
                                  x
@end group
@group
(%i5) method;
(%o5)                          lie
@end group
@end example


以下の Riccati方程式は
変数 @code{%u}に関する線形二階 ODEに変換されます。
Maximaは新しい ODEを解くことができません。
なので未評価で返します。
@c ===beg===
@c load('contrib_ode)$
@c eqn:x^2*'diff(y,x)=a+b*x^n+c*x^2*y^2;
@c contrib_ode(eqn,y,x);
@c method;
@c ===end===
@example
(%i1) load('contrib_ode)$
@group
(%i2) eqn:x^2*'diff(y,x)=a+b*x^n+c*x^2*y^2;
                    2 dy      2  2      n
(%o2)              x  -- = c x  y  + b x  + a
                      dx
@end group
@group
(%i3) contrib_ode(eqn,y,x);
               d%u
               ---                            2
               dx        2  a       n - 2    d %u
(%o3)  [[y = - ----, %u c  (-- + b x     ) + ---- c = 0]]
               %u c          2                 2
                            x                dx
@end group
@group
(%i4) method;
(%o4)                        riccati
@end group
@end example


一階 ODEに対して @code{contrib_ode}は @code{ode2}をコールします。
その後、以下の方法を試します:
因数分解、Clairault, Lagrange, Riccati, Abel, Lie対称性を使った方法。
もし Abel方法が失敗したら、
Lie方法は Abel方程式には試みられませんが、
もし Riccati方法が未解決二階 ODEを返したら、 Lie方法が試みられます。

二階 ODEに対して @code{contrib_ode}は @code{ode2}をコールし、その後
@code{odelin}をコールします。

もしコマンド
@code{put('contrib_ode,true,'verbose)}を実行したら
長いデバッグトレースとメッセージが表示されます。

@opencatbox
@category{Differential equations} @category{Share packages} @category{Package contrib_ode}
@closecatbox


@node Functions and Variables for contrib_ode, Possible improvements to contrib_ode, Introduction to contrib_ode, contrib_ode-pkg
@section Functions and Variables for contrib_ode

@deffn {関数} contrib_ode (@var{eqn}, @var{y}, @var{x})

独立変数 @var{x}と従属変数 @var{y}に関する ODE @var{eqn}の解のリストを返します。


@opencatbox
@category{Package contrib_ode}
@closecatbox

@end deffn

@deffn {関数} odelin (@var{eqn}, @var{y}, @var{x})

@code{odelin}は独立変数 @var{x}と従属変数 @var{y}に関する一階および二階線形斉次
ODEを解きます。
ODEの基本的な解一式を返します。

二階 ODEに対して @code{odelin}は、与えられた特殊関数を使って解を探索する
Bronsteinと Lafailleによる方法を使います。

@c ===beg===
@c load('contrib_ode)$
@c odelin(x*(x+1)*'diff(y,x,2)+(x+5)*'diff(y,x,1)+(-4)*y,y,x);
@c ===end===
@example
(%i1) load('contrib_ode)$
@group
(%i2) odelin(x*(x+1)*'diff(y,x,2)+(x+5)*'diff(y,x,1)+(-4)*y,y,x);
       gauss_a(- 6, - 2, - 3, - x)  gauss_b(- 6, - 2, - 3, - x)
(%o2) @{---------------------------, ---------------------------@}
                    4                            4
                   x                            x
@end group
@end example

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end deffn

@deffn {関数} ode_check (@var{eqn}, @var{soln})

可能な解 @var{soln}を代入した後、 ODE @var{eqn}の値を返します。
もし @var{soln}が @var{eqn}の解なら値はゼロと同値です。

@c ===beg===
@c load('contrib_ode)$
@c eqn:'diff(y,x,2)+(a*x+b)*y;
@c ans:[y = bessel_y(1/3,2*(a*x+b)^(3/2)/(3*a))*%k2*sqrt(a*x+b)
@c          +bessel_j(1/3,2*(a*x+b)^(3/2)/(3*a))*%k1*sqrt(a*x+b)];
@c ode_check(eqn,ans[1]);
@c ===end===
@example
(%i1) load('contrib_ode)$
@group
(%i2) eqn:'diff(y,x,2)+(a*x+b)*y;
                         2
                        d y
(%o2)                   --- + (b + a x) y
                          2
                        dx
@end group
(%i3) ans:[y = bessel_y(1/3,2*(a*x+b)^(3/2)/(3*a))*%k2*sqrt(a*x+b)
         +bessel_j(1/3,2*(a*x+b)^(3/2)/(3*a))*%k1*sqrt(a*x+b)];
                                  3/2
                    1  2 (b + a x)
(%o3) [y = bessel_y(-, --------------) %k2 sqrt(a x + b)
                    3       3 a
                                          3/2
                            1  2 (b + a x)
                 + bessel_j(-, --------------) %k1 sqrt(a x + b)]
                            3       3 a
@group
(%i4) ode_check(eqn,ans[1]);
(%o4)                           0
@end group
@end example

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end deffn

@defvr {システム変数} method

変数 @code{method}は成功した解法に設定されます。

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end defvr

@defvr {変数} %c

@code{%c}は一階 ODEの積分定数です。

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end defvr

@defvr {変数} %k1

@code{%k1}は二階 ODEの最初の積分定数です。

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end defvr

@defvr {変数} %k2

@code{%k2}は二階 ODEの二番目の積分定数です。

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end defvr

@anchor{gauss_a}
@deffn {関数} gauss_a (@var{a}, @var{b}, @var{c}, @var{x})

@code{gauss_a(a,b,c,x)}と @code{gauss_b(a,b,c,x)}は 2F1幾何関数です。
それらは超幾何微分方程式
@code{x(1-x) diff(y,x,2) + [c-(a+b+1)x] diff(y,x) - aby = 0}
の任意の２つの独立解を表します (A&S 15.5.1)。

これらの関数は
@code{odelin}と @code{contrib_ode}が返す ODEの解の中でだけ使われます。
これらの関数の定義と使用は Maimaの将来のリリースで変わるかもしれません。

@mref{gauss_b}, @mref{dgauss_a}, @mref{gauss_b}も参照してください。

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end deffn

@anchor{gauss_b}
@deffn {関数} gauss_b (@var{a}, @var{b}, @var{c}, @var{x})
@mref{gauss_a}を参照してください。

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end deffn

@anchor{dgauss_a}
@deffn {関数} dgauss_a (@var{a}, @var{b}, @var{c}, @var{x})
@code{gauss_a(@var{a}, @var{b}, @var{c}, @var{x})}の @var{x}に関する導関数。

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end deffn

@deffn {関数} dgauss_b (@var{a}, @var{b}, @var{c}, @var{x})
@code{gauss_b(@var{a}, @var{b}, @var{c}, @var{x})}の @var{x}に関する導関数。

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end deffn


@anchor{kummer_m}
@deffn {関数} kummer_m (@var{a}, @var{b}, @var{x})

Abramowitz and Stegun,
@i{Handbook of Mathematical Functions}, Section 13.1.2の中で定義される
Kummerの M関数

この関数は
@code{odelin}と @code{contrib_ode}が返す ODEの解の中でだけ使われます。
この関数の定義と使用は Maimaの将来のリリースで変わるかもしれません。

@mref{kummer_u}, @mref{dkummer_m}, @mref{dkummer_u}も参照してください。

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end deffn

@anchor{kummer_u}
@deffn {関数} kummer_u (@var{a}, @var{b}, @var{x})

Abramowitz and Stegun,
@i{Handbook of Mathematical Functions}, Section 13.1.3の中で定義される
Kummerの U関数

@mref{kummer_m}を参照してください。

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end deffn

@anchor{dkummer_m}
@deffn {関数} dkummer_m (@var{a}, @var{b}, @var{x})
@code{kummer_m(@var{a}, @var{b}, @var{x})}の @var{x}に関する導関数。

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end deffn

@anchor{dkummer_u}
@deffn {関数} dkummer_u (@var{a}, @var{b}, @var{x})
@code{kummer_u(@var{a}, @var{b}, @var{x})}の @var{x}に関する導関数。

@opencatbox
@category{Package contrib_ode}
@closecatbox

@end deffn

@deffn {関数} bessel_simplify (@var{expr})
Bessel関数 bessel_j, bessel_y, bessel_i, bessel_k, hankel_1, hankel_2, strauve_h, strauve_lを含む式を整理します。
最高次数 nの関数を次数 n-1と n-2の関数で置き換えるのに
(Abramowitz and Stegun, @i{Handbook of Mathematical Functions}, 9.1.27節に与えられる)
漸化式を使います。

すべての次数の差が2より小さくなるまでこのプレセスを繰り返します。

@c ===beg===
@c load('contrib_ode)$
@c bessel_simplify(4*bessel_j(n,x^2)*(x^2-n^2/x^2)
@c   +x*((bessel_j(n-2,x^2)-bessel_j(n,x^2))*x
@c   -(bessel_j(n,x^2)-bessel_j(n+2,x^2))*x)
@c   -2*bessel_j(n+1,x^2)+2*bessel_j(n-1,x^2));
@c bessel_simplify(-2*bessel_j(1,z)*z^3-10*bessel_j(2,z)*z^2
@c  +15*%pi*bessel_j(1,z)*struve_h(3,z)*z-15*%pi*struve_h(1,z)*bessel_j(3,z)*z
@c  -15*%pi*bessel_j(0,z)*struve_h(2,z)*z+15*%pi*struve_h(0,z)*bessel_j(2,z)*z
@c  -30*%pi*bessel_j(1,z)*struve_h(2,z)+30*%pi*struve_h(1,z)*bessel_j(2,z));
@c ===end===
@example
(%i1) load('contrib_ode)$
@group
(%i2) bessel_simplify(4*bessel_j(n,x^2)*(x^2-n^2/x^2)
  +x*((bessel_j(n-2,x^2)-bessel_j(n,x^2))*x
  -(bessel_j(n,x^2)-bessel_j(n+2,x^2))*x)
  -2*bessel_j(n+1,x^2)+2*bessel_j(n-1,x^2));
(%o2)                           0
@end group
@group
(%i3) bessel_simplify(-2*bessel_j(1,z)*z^3-10*bessel_j(2,z)*z^2
 +15*%pi*bessel_j(1,z)*struve_h(3,z)*z-15*%pi*struve_h(1,z)*bessel_j(3,z)*z
 -15*%pi*bessel_j(0,z)*struve_h(2,z)*z+15*%pi*struve_h(0,z)*bessel_j(2,z)*z
 -30*%pi*bessel_j(1,z)*struve_h(2,z)+30*%pi*struve_h(1,z)*bessel_j(2,z));
(%o3)                           0
@end group
@end example

@opencatbox
@category{Package contrib_ode}
@category{Bessel functions}
@category{Special functions}
@closecatbox

@end deffn

@deffn {関数} expintegral_e_simplify (@var{expr})
漸化式 (A&S 5.1.14)を使って指数積分 expintegral_eを含む式を整理します。

   expintegral_e(n+1,z)
        = (1/n) * (exp(-z)-z*expintegral_e(n,z))      n = 1,2,3 ....

@opencatbox
@category{Package contrib_ode}
@category{Exponential Integrals}
@category{Special functions}
@closecatbox

@end deffn


@node Possible improvements to contrib_ode, Test cases for contrib_ode, Functions and Variables for contrib_ode, contrib_ode-pkg
@section Possible improvements to contrib_ode


これらのルーチンは開発進行中です。まだ以下をする必要があります:

@itemize @bullet

@item
FACTOR方法 @code{ode1_factor}を多重根で機能するように拡張すること。

@item
FACTOR方法 @code{ode1_factor}をより高次因子を解こうとするように拡張すること。
現在、線形因子を解こうとするだけです。

@item
LAGRANGEルーチン @code{ode1_lagrange}を複素根より実根を優先するように直すこと。

@item
Riccati方程式のための他の方法を追加すること。

@item
第二種Abel方程式の検出を改善すること。
今のパターンマッチングは弱いです。

@item
Lie対称群ルーチン @code{ode1_lie}に関する仕事。
2,3の相当な問題があります:
いくつかの部分が未実装です;
いくつかのテストケースが無限ループのようです;
他のテストケースではクラッシュします;
さらに他では非常に複雑な「解」を返します。
本当にリリースの準備ができていたか疑っています。

@item
もっとテストケースを追加すること。

@end itemize

@node Test cases for contrib_ode, References for contrib_ode, Possible improvements to contrib_ode, contrib_ode-pkg
@section Test cases for contrib_ode


ルーチンは
文献 Murphy, Kamke, Zwillinger他からのおおよそ千のテストケース上でテストされています。
これらはテストサブディレクトリに含まれています。

@itemize @bullet
@item
The Clairaultルーチン @code{ode1_clairault}は特異解を含み、
Murphyと Kamkeの中の Clairault方程式の知られている解すべてを見つけます。

@item
他のルーチンは、多重解が存在する時にしばしば単一界を返します。

@item
@code{ode1_lie}の「解」のいくつかは過度に複雑でチェックが不可能です。

@item
いくつかのクラッシュがあります。

@end itemize

@node References for contrib_ode, ,Test cases for contrib_ode, contrib_ode-pkg
@section References for contrib_ode


@enumerate
@item
E. Kamke, Differentialgleichungen Losungsmethoden und Losungen, Vol 1,
    Geest & Portig, Leipzig, 1961

@item
G. M. Murphy, Ordinary Differential Equations and Their Solutions,
    Van Nostrand, New York, 1960

@item
D. Zwillinger, Handbook of Differential Equations, 3rd edition,
    Academic Press, 1998

@item
F. Schwarz, Symmetry Analysis of Abel's Equation, Studies in
    Applied Mathematics, 100:269-294 (1998)

@item
F. Schwarz, Algorithmic Solution of Abel's Equation,
    Computing 61, 39-49 (1998)

@item
E. S. Cheb-Terrab, A. D. Roche, Symmetries and First Order
    ODE Patterns, Computer Physics Communications 113 (1998), p 239.
@c dead link
    (@url{http://lie.uwaterloo.ca/papers/ode_vii.pdf})

@item
E. S. Cheb-Terrab, T. Kolokolnikov,  First Order ODEs,
    Symmetries and Linear Transformations, European Journal of
    Applied Mathematics, Vol. 14, No. 2, pp. 231-246 (2003).
@c dead link
    (@url{http://arxiv.org/abs/math-ph/0007023},@*
    @url{http://lie.uwaterloo.ca/papers/ode_iv.pdf})


@item
G. W. Bluman, S. C. Anco, Symmetry and Integration Methods for
    Differential Equations, Springer, (2002)

@item
M. Bronstein, S. Lafaille,
Solutions of linear ordinary differential equations in terms
of special functions,
Proceedings of ISSAC 2002, Lille, ACM Press, 23-28.
(@url{http://www-sop.inria.fr/cafe/Manuel.Bronstein/publications/issac2002.pdf})


@end enumerate
