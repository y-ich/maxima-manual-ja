@menu
* Introduction to celine::
@end menu

@node Introduction to celine
@section Introduction to celine

シスターCelineの方法のMaxima実装。
Barton Willisがこのコードを書きました。
@uref{https://creativecommons.org/about/cc0,Creative Commons CC0 license}の下で公開されています。

Celineの方法は、Marko Petkovsek, Herbert S. Wilf, Doron Zeilberger著 書籍"A=B"の4.1-4.4節に記述があります。
この本は @uref{http://www.math.rutgers.edu/~zeilberg/AeqB.pdf}で閲覧可能です。

f = F(n,k)とします。
関数celineはFの漸化式の集合を以下の形式で返します。

    p_0(n) * fff(n,k) + p_1(n) * fff(n+1,k) + ... +  p_p(n) * fff(n+p,k+q),

ここでp_0から p_pは多項式です。
もしMaximaが sum(sum(a(i,j) * F(n+i,k+j),i,0,p),j,0,q) / F(n,k)が nと kの有理関数だとわからなければ、
celineは空集合を返します。
fがパラメータ(nや k以外の変数)を含む時、 celineはこれらのパラメータについて仮定を作るかもしれません。
'proviso'のキーとともに 'put'を使うと、 Maximaは入力ラベルにこれらの仮定を保存します。

この関数を使うには、最初にパッケージ integer_sequence, opsubst, to_poly_solveをロードします。

例:

@c ===beg===
@c load("integer_sequence")$
@c load("opsubst")$
@c load("to_poly_solve")$
@c load("celine")$
@c celine(n!,n,k,1,0);
@c ===end===
@example
(%i1) load("integer_sequence")$
(%i2) load("opsubst")$
(%i3) load("to_poly_solve")$
(%i4) load("celine")$
@group
(%i5) celine(n!,n,k,1,0);
(%o5)       @{fff(n + 1, k) - n fff(n, k) - fff(n, k)@}
@end group
@end example

結果が正しいことの確認:
@c ===beg===
@c load("integer_sequence")$
@c load("opsubst")$
@c load("to_poly_solve")$
@c load("celine")$
@c g1:{fff(n+1,k)-n*fff(n,k)-fff(n,k)};
@c ratsimp(minfactorial(first(g1))),fff(n,k) := n!;
@c ===end===
@example
(%i1) load("integer_sequence")$
(%i2) load("opsubst")$
(%i3) load("to_poly_solve")$
(%i4) load("celine")$
@group
(%i5) g1:@{fff(n+1,k)-n*fff(n,k)-fff(n,k)@};
(%o5)       @{fff(n + 1, k) - n fff(n, k) - fff(n, k)@}
@end group
@group
(%i6) ratsimp(minfactorial(first(g1))),fff(n,k) := n!;
(%o6)                           0
@end group
@end example

パラメータ付き例(例の結果が正しいというテストを含む):
@c ===beg===
@c load("integer_sequence")$
@c load("opsubst")$
@c load("to_poly_solve")$
@c load("celine")$
@c e : pochhammer(a,k) * pochhammer(-k,n) / (pochhammer(b,k));
@c recur : celine(e,n,k,2,1);
@c /* Test this result for correctness */
@c first(%), fff(n,k) := ''(e)$
@c makefact(makegamma(%))$
@c minfactorial(factor(minfactorial(factor(%))));
@c ===end===
@example
(%i1) load("integer_sequence")$
(%i2) load("opsubst")$
(%i3) load("to_poly_solve")$
(%i4) load("celine")$
@group
(%i5) e : pochhammer(a,k) * pochhammer(-k,n) / (pochhammer(b,k));
                           (a)  (- k)
                              k      n
(%o5)                      -----------
                              (b)
                                 k
@end group
@group
(%i6) recur : celine(e,n,k,2,1);
(%o6) @{fff(n + 2, k + 1) - fff(n + 2, k) - b fff(n + 1, k + 1)
 + n ((- fff(n + 1, k + 1)) + 2 fff(n + 1, k) - a fff(n, k)
 - fff(n, k)) + a (fff(n + 1, k) - fff(n, k)) + 2 fff(n + 1, k)
    2
 - n  fff(n, k)@}
@end group
(%i7) /* Test this result for correctness */
(%i8) first(%), fff(n,k) := ''(e)$
@group
(%i9) makefact(makegamma(%))$
(%o9)                           0
@end group
(%i10) minfactorial(factor(minfactorial(factor(%))));
@end example

provisoデータが、設定 a = bがより低い次数の漸化式を出力することを示します。
以下の例がそれを示します:
@c ===beg===
@c load("integer_sequence")$
@c load("opsubst")$
@c load("to_poly_solve")$
@c load("celine")$
@c e : pochhammer(a,k) * pochhammer(-k,n) / (pochhammer(b,k));
@c recur : celine(e,n,k,2,1);
@c get('%,'proviso);
@c celine(subst(b=a,e),n,k,1,1);
@c ===end===
@example
(%i1) load("integer_sequence")$
(%i2) load("opsubst")$
(%i3) load("to_poly_solve")$
(%i4) load("celine")$
@group
(%i5) e : pochhammer(a,k) * pochhammer(-k,n) / (pochhammer(b,k));
                           (a)  (- k)
                              k      n
(%o5)                      -----------
                              (b)
                                 k
@end group
@group
(%i6) recur : celine(e,n,k,2,1);
(%o6) @{fff(n + 2, k + 1) - fff(n + 2, k) - b fff(n + 1, k + 1)
 + n ((- fff(n + 1, k + 1)) + 2 fff(n + 1, k) - a fff(n, k)
 - fff(n, k)) + a (fff(n + 1, k) - fff(n, k)) + 2 fff(n + 1, k)
    2
 - n  fff(n, k)@}
@end group
@group
(%i7) get('%,'proviso);
(%o7)                         false
@end group
@group
(%i8) celine(subst(b=a,e),n,k,1,1);
(%o8) @{fff(n + 1, k + 1) - fff(n + 1, k) + n fff(n, k)
                                                     + fff(n, k)@}
@end group
@end example
