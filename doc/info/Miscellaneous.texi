@menu
* Introduction to Miscellaneous Options::
* Share::
* Functions and Variables for Miscellaneous Options::
@end menu

@c -----------------------------------------------------------------------------
@node Introduction to Miscellaneous Options, Share, Miscellaneous Options, Miscellaneous Options
@section Introduction to Miscellaneous Options
@c -----------------------------------------------------------------------------

この節では、 Maximaの操作上、グローバルな効果を持つ様々なオプションが論じられます。
すべてのユーザー定義関数のリストのような様々なリストも論じられます。

@c -----------------------------------------------------------------------------
@node Share, Functions and Variables for Miscellaneous Options, Introduction to Miscellaneous Options, Miscellaneous Options
@section Share
@c -----------------------------------------------------------------------------

Maximaの「共有」ディレクトリは Maximaユーザーのためのものですが、
Maximaのコア実装の部分ではないプログラムと他のファイルを含みます。
これらのプログラムは通常、 @code{load}や @code{setup_autoload}によってロードされます。

@code{:lisp *maxima-sharedir*}は
ユーザーのファイルシステム内の共有ディレクトリの位置を表示します。

@c FIXME FIXME FIXME -- WE REALLY NEED AN UP-TO-DATE LIST OF SHARE PACKAGES !!
@code{printfile ("share.usg")}は共有パッケージの期限切れリストを印字します。
ファイルシステムブラウザを使って共有ディレクトリをブラウズするともっと情報が得られることに
ユーザーは気づくでしょう。

@c -----------------------------------------------------------------------------
@node Functions and Variables for Miscellaneous Options,  , Share, Miscellaneous Options
@section Functions and Variables for Miscellaneous Options
@c -----------------------------------------------------------------------------

@c After studying src/compar.lisp, it appears that askexp would
@c work as advertised, except that it doesn't appear to be possible
@c to open a break prompt with ^A or any other character.
@c What should we do about askexp ???

@c -----------------------------------------------------------------------------
@anchor{askexp}
@defvr {システム変数} askexp
@code{asksign}がコールされた時、
@code{askexp}は @code{asksign}がテストしている式です。

以前は、control-AでMaximaブレイクに入ることによって
ユーザーが @code{askexp}を検査することができました。

@opencatbox
@category{Declarations and inferences}
@closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@anchor{genindex}
@defvr {オプション変数} genindex
デフォルト値: @code{i}

@code{genindex}は、必要な時、和の次の変数を生成するために使われる
アルファベットの接頭辞です。

@opencatbox
@category{Sums and products}
@closecatbox
@end defvr

@anchor{gensumnum}
@defvr {オプション変数} gensumnum
デフォルト値: 0

@code{gensumnum}は、和の次の変数を生成するために使われる数値接尾辞です。
もし @code{false}に設定されているなら、インデックスは数値接尾辞なしで
@code{genindex}だけから構成されます。

@opencatbox
@category{Sums and products}
@closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@anchor{gensym}
@deffn  {関数} gensym @
@fname{gensym} () @
@fname{gensym} (@var{x})

@code{gensym()}は新鮮なシンボルを生成し返します。

新しいシンボルの名前は、デフォルトで"g"の接頭辞と
デフォルトでLisp内部カウンタの値の整数の接尾辞の連結です。

もし @var{x}が供給されてそれが文字列なら、この
gensymへの呼び出しに限ってその文字列が
"g"の代わりに接頭辞として使われます。

もし @var{x}が供給されてそれが非負整数なら、
この gensymへの呼び出しに限って内部カウンタの値の代わりに接尾辞として使われます。

もし明示的に接尾辞が供給されない時だけ、
内部カウンタが使われた後 1だけ増分されます。

例:

@c ===beg===
@c gensym();
@c gensym("new");
@c gensym(123);
@c ===end===
@example
(%i1) gensym();
(%o1)                         g887
(%i2) gensym("new");
(%o2)                        new888
(%i3) gensym(123);
(%o3)                         g123
@end example
@end deffn

@c STILL EXISTS. NEEDS CLARIFICATION !!!

@c -----------------------------------------------------------------------------
@anchor{packagefile}
@defvr {オプション変数} packagefile
デフォルト値: @code{false}

@code{packagefile: true}を設定すると、
ファイルがロードされる時必要なところを除いて、
Maximaの情報リスト（例えば、@mref{values}, @mref{functions}）への
情報の追加を抑制します。
他の人が使うパッケージ（ファイル）を生成するために
@mref{save}や @mref{translate}を使うパッケージデザイナーが使ったりします。
こうすると、
ユーザーが自身のデータを追加した時
パッケージの中身はユーザーのやったことを取り込まないでしょう。
これは起こりうる名前衝突の問題を解決はしないことに注意してください。
このフラグはパッケージファイルへ出力されるものに素直に影響することにも注意してください。
フラグを @code{true}に設定することは
Maxima初期化ファイルを生成するにも役に立ちます。

@opencatbox
@category{Translation flags and variables}
@closecatbox
@end defvr

@c NEEDS EXAMPLES

@c -----------------------------------------------------------------------------
@anchor{remvalue}
@deffn  {関数} remvalue @
@fname{remvalue} (@var{name_1}, @dots{}, @var{name_n}) @
@fname{remvalue} remvalue (all)

(添字付きもありえる)ユーザー変数 @var{name_1}, ...,
@var{name_n}の値をシステムから取り除きます。

@code{remvalue (all)}は、@code{values}―
(Maximaが自動的に割り当てたものと対照的に)ユーザーが名前を与えた変数すべてのリスト―
の中の変数すべての値を取り除きます。

@mref{values}も参照してください。

@opencatbox
@category{Evaluation}
@closecatbox
@end deffn

@c NEEDS EXAMPLES

@c -----------------------------------------------------------------------------
@anchor{rncombine}
@deffn {関数} rncombine (@var{expr})

同一の分母や、たがいに数値因子だけ異なる分母を持つ
@var{expr}のすべての項を結合することで、 @var{expr}を変換します。
これは @code{combine}の振る舞いとわずかに違います。
@code{combine}は同一分母を持つ項を集めます。

@code{pfeformat: true}を設定し、 @code{combine}を使うことは、
@code{rncombine}を使って得られるものと似た結果をもたらしますが、
@code{rncombine}はクロス積の数値的分母因子のおまけのステップを実行します。
これは、きれいな形式と、いくつかの相殺を認識する可能性をもたらします。

@code{load(rncomb)}はこの関数をロードします。

@opencatbox
@category{Expressions}
@closecatbox

@end deffn

@c -----------------------------------------------------------------------------
@anchor{setup_autoload}
@deffn {関数} setup_autoload (@var{filename}, @var{function_1}, ..., @var{function_n})

もし @var{function_1}, ...,
@var{function_n}のいずれかが参照されたがまだ定義されていないなら、
@code{load}を通じて @var{filename}がロードされるように指定します。
@var{filename}は強制はされませんが、普通、指定された関数の定義を含みます。

@code{setup_autoload}は @mref{memoizing functions}については機能しません。

@code{setup_autoload}は引数をクォートします。

例:

@c EXAMPLE GENERATED FROM FOLLOWING INPUT
@c legendre_p (1, %pi);
@c setup_autoload ("specfun.mac", legendre_p, ultraspherical);
@c ultraspherical (2, 1/2, %pi);
@c legendre_p (1, %pi);
@c legendre_q (1, %pi);
@example
(%i1) legendre_p (1, %pi);
(%o1)                  legendre_p(1, %pi)
(%i2) setup_autoload ("specfun.mac", legendre_p, ultraspherical);
(%o2)                         done
(%i3) ultraspherical (2, 1/2, %pi);
Warning - you are redefining the Macsyma function ultraspherical
Warning - you are redefining the Macsyma function legendre_p
                            2
                 3 (%pi - 1)
(%o3)            ------------ + 3 (%pi - 1) + 1
                      2
(%i4) legendre_p (1, %pi);
(%o4)                          %pi
(%i5) legendre_q (1, %pi);
                              %pi + 1
                      %pi log(-------)
                              1 - %pi
(%o5)                 ---------------- - 1
                             2
@end example

@opencatbox
@category{Function definition} @category{File input}
@closecatbox
@end deffn

@c RECOMMEND CUTTING THIS ITEM AND CUTTING $tcl_output IN src/plot.lisp
@c THIS REALLY, REALLY SEEMS LIKE CRUFT:
@c $tcl_output IS NEVER CALLED WITHIN MAXIMA SOURCE,
@c AND THIS EXTREMELY NARROW, LIMITED FUNCTIONALITY ISN'T USEFUL TO USERS
@c AND IT'S BROKEN: INCORRECT OUTPUT FOR CLISP, DIES ON GCL

@c -----------------------------------------------------------------------------
@anchor{tcl_output}
@deffn  {関数} tcl_output @
@fname{tcl_output} (@var{list}, @var{i0}, @var{skip}) @
@fname{tcl_output} (@var{list}, @var{i0}) @
@fname{tcl_output} ([@var{list_1}, @dots{}, @var{list_n}], @var{i})

リストの要素をカーリ括弧@code{@{ @}}で囲んで表示します。
Tcl/Tk言語のプログラムの一部として適した形です。

@code{tcl_output (@var{list}, @var{i0}, @var{skip})}は、
要素@var{i0}で始まり、
要素 @code{@var{i0} + @var{skip}}, @code{@var{i0} + 2 @var{skip}},
 などなどというように @var{list}を表示します。

@code{tcl_output (@var{list}, @var{i0})}は
@code{tcl_output (@var{list}, @var{i0}, 2)}と同値です。

@code{tcl_output ([@var{list_1}, ..., @var{list_n}], @var{i})}は
@var{list_1}, @dots{}, @var{list_n}の @var{i}番目の要素を表示します。

例:
@c EXAMPLE INPUT
@c tcl_output ([1, 2, 3, 4, 5, 6], 1, 3)$
@c tcl_output ([1, 2, 3, 4, 5, 6], 2, 3)$
@c tcl_output ([3/7, 5/9, 11/13, 13/17], 1)$
@c tcl_output ([x1, y1, x2, y2, x3, y3], 2)$
@c tcl_output ([[1, 2, 3], [11, 22, 33]], 1)$

@c EXAMPLE OUTPUT: CLISP
@c OUTPUT IS OK FOR FIRST TWO, BROKEN FOR OTHERS
@c GCL OUTPUT: SAME FOR FIRST TWO
@c GCL FAILS ON OTHERS (IN EACH CASE COMPLAINING ELEMENTS ARE "not of type (OR RATIONAL LISP:FLOAT)")
@example
(%i1) tcl_output ([1, 2, 3, 4, 5, 6], 1, 3)$

 @{1.000000000     4.000000000
 @}
(%i2) tcl_output ([1, 2, 3, 4, 5, 6], 2, 3)$

 @{2.000000000     5.000000000
 @}
(%i3) tcl_output ([3/7, 5/9, 11/13, 13/17], 1)$

 @{((RAT SIMP) 3 7) ((RAT SIMP) 11 13)
 @}
(%i4) tcl_output ([x1, y1, x2, y2, x3, y3], 2)$

 @{$Y1 $Y2 $Y3
 @}
(%i5) tcl_output ([[1, 2, 3], [11, 22, 33]], 1)$

 @{SIMP 1.000000000     11.00000000
 @}
@end example
@end deffn
