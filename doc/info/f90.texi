@menu
* Package f90::
@end menu

@c -----------------------------------------------------------------------------
@node Package f90,  , f90-pkg, f90-pkg
@section Package f90

@opencatbox
@category{Share packages} @category{Package f90}
@closecatbox
@c -----------------------------------------------------------------------------

@c -----------------------------------------------------------------------------
@anchor{f90_output_line_length_max}
@defvr {オプション変数} f90_output_line_length_max
デフォルト値: 65

@code{f90_output_line_length_max}
@code{f90}が1行に出力する Fortranコードの文字の最大数です。
より長いコードは分割され、
出力行の最後と次の行の最初にアンパサンド @code{&}をつけて印字されます。

@code{f90_output_line_length_max}は正の整数でなければいけません。

例:

@c ===beg===
@c load ("f90")$
@c foo : expand ((xxx + yyy + 7)^4);
@c f90_output_line_length_max;
@c f90 ('foo = foo);
@c f90_output_line_length_max : 40 $
@c f90 ('foo = foo);
@c ===end===
@example
(%i1) load ("f90")$
(%i2) foo : expand ((xxx + yyy + 7)^4);
         4            3         3        2    2             2
(%o2) yyy  + 4 xxx yyy  + 28 yyy  + 6 xxx  yyy  + 84 xxx yyy
          2        3             2
 + 294 yyy  + 4 xxx  yyy + 84 xxx  yyy + 588 xxx yyy + 1372 yyy
      4         3          2
 + xxx  + 28 xxx  + 294 xxx  + 1372 xxx + 2401
(%i3) f90_output_line_length_max;
(%o3)                          65
(%i4) f90 ('foo = foo);
foo = yyy**4+4*xxx*yyy**3+28*yyy**3+6*xxx**2*yyy**2+84*xxx*yyy**2&
&+294*yyy**2+4*xxx**3*yyy+84*xxx**2*yyy+588*xxx*yyy+1372*yyy+xxx**&
&4+28*xxx**3+294*xxx**2+1372*xxx+2401
(%o4)                         false
(%i5) f90_output_line_length_max : 40 $
(%i6) f90 ('foo = foo);
foo = yyy**4+4*xxx*yyy**3+28*yyy**3+6*xx&
&x**2*yyy**2+84*xxx*yyy**2+294*yyy**2+4*x&
&xx**3*yyy+84*xxx**2*yyy+588*xxx*yyy+1372&
&*yyy+xxx**4+28*xxx**3+294*xxx**2+1372*xx&
&x+2401
(%o6)                         false
@end example

@opencatbox
@category{Global variables} @category{Translation and compilation} @category{Package f90}
@closecatbox
@end defvr

@c -----------------------------------------------------------------------------
@anchor{function_f90}
@deffn {関数} f90 (@var{expr_1}, @dots{}, @var{expr_n})

１つか複数の式 @var{expr_1}, @dots{}, @var{expr_n}を
Fortran 90プログラムとして印字します。
出力は標準出力に印字されます。

@code{f90}は
Fortran 90のいわゆる「自由形式」入力フォーマットで出力を印字します:
列位置に特別な注意はありません。
長い行は、アンパサンド @code{&}継続文字で固定幅に分割されます。

@code{load("f90")}はこの関数をロードします。
関数 @mref{fortran}も参照してください。

例:

@c ===beg===
@c load ("f90")$
@c foo : expand ((xxx + yyy + 7)^4);
@c f90 ('foo = foo);
@c ===end===
@example
(%i1) load ("f90")$
(%i2) foo : expand ((xxx + yyy + 7)^4);
         4            3         3        2    2             2
(%o2) yyy  + 4 xxx yyy  + 28 yyy  + 6 xxx  yyy  + 84 xxx yyy
          2        3             2
 + 294 yyy  + 4 xxx  yyy + 84 xxx  yyy + 588 xxx yyy + 1372 yyy
      4         3          2
 + xxx  + 28 xxx  + 294 xxx  + 1372 xxx + 2401
(%i3) f90 ('foo = foo);
foo = yyy**4+4*xxx*yyy**3+28*yyy**3+6*xxx**2*yyy**2+84*xxx*yyy**2&
&+294*yyy**2+4*xxx**3*yyy+84*xxx**2*yyy+588*xxx*yyy+1372*yyy+xxx**&
&4+28*xxx**3+294*xxx**2+1372*xxx+2401
(%o3)                         false
@end example

複数式。
@mref{with_stdout}関数を介して標準出力をファイルにとらえます。

@c ===beg===
@c load ("f90")$
@c foo : sin (3*x + 1) - cos (7*x - 2);
@c with_stdout ("foo.f90", f90 (x = 0.25, y = 0.625, 'foo = foo, 'stop, 'end));
@c printfile ("foo.f90");
@c ===end===
@example
(%i1) load ("f90")$
(%i2) foo : sin (3*x + 1) - cos (7*x - 2);
(%o2)              sin(3 x + 1) - cos(7 x - 2)
(%i3) with_stdout ("foo.f90",
                   f90 (x = 0.25, y = 0.625, 'foo = foo, 'stop, 'end));
(%o3)                         false
(%i4) printfile ("foo.f90");
x = 0.25
y = 0.625
foo = sin(3*x+1)-cos(7*x-2)
stop
end
(%o4)                        foo.f90
@end example

@opencatbox
@category{Translation and compilation} @category{Package f90}
@closecatbox
@end deffn
